{"version":3,"sources":["backbone.marionette.min.js","/source/src/trigger-method.js","/source/src/monitor-view-events.js","/source/src/bind-entity-events.js","/source/src/bind-radio-requests.js","/source/src/mixins/behaviors.js","/source/src/utils/getUniqueEventName.js","/source/src/mixins/triggers.js","/source/src/utils/destroyBackboneView.js","/source/src/config/behaviors-lookup.js","/source/src/config/features.js","/source/src/utils/_proxy.js","/source/src/utils/extend.js","/source/src/utils/isNodeAttached.js","/source/src/utils/mergeOptions.js","/source/src/utils/getOption.js","/source/src/utils/normalizeMethods.js","/source/src/utils/deprecate.js","/source/src/utils/getValue.js","/source/src/utils/_setOptions.js","/source/src/error.js","/source/src/mixins/common.js","/source/src/mixins/radio.js","/source/src/object.js","/source/src/template-cache.js","/source/src/renderer.js","/source/src/utils/_invoke.js","/source/src/mixins/delegate-entity-events.js","/source/src/mixins/ui.js","/source/src/mixins/view.js","/source/src/region.js","/source/src/mixins/regions.js","/source/src/view.js","/source/src/collection-view.js","/source/src/composite-view.js","/source/src/behavior.js","/source/src/application.js","/source/src/app-router.js","/source/src/backbone.marionette.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","this","Backbone","_","Radio","ChildViewContainer","getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","result","methodName","replace","splitter","method","getOption","call","_len","arguments","length","args","Array","_key","isFunction","apply","trigger","concat","triggerMethodOn","context","fnc","_len2","_key2","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","monitorViewEvents","handleBeforeAttach","handleAttach","triggerDOMRefresh","handleBeforeDetach","handleDetach","handleRender","_isRendered","_areViewEventsMonitored","on","before:attach","attach","before:detach","detach","render","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","message","url","isString","bindEntityEvents","unbindEntityEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRadioRequests","unbindRadioRequests","getBehaviorClass","options","key","behaviorClass","getValue","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","flatten","value","uniqueName","selector","uniqueId","join","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","e","destroyBackboneView","supportsDestroyLifecycle","remove","_isDestroyed","isEnabled","name","FEATURES","setEnabled","state","babelHelpers","toConsumableArray","arr","isArray","i","arr2","from","version","proxy","extend","Model","isNodeAttached","el","$","contains","document","documentElement","mergeOptions","keys","pick","optionName","undefined","hash","_this","reduce","normalizedHash","deprecate","test","prev","next","DEV_MODE","_cache","_warn","_console","console","warn","log","_setOptions","errorProps","Error","urlRoot","constructor","error","captureStackTrace","toString","CommonMixin","RadioMixin","_initRadio","channelName","_channel","radioEvents","bindRadioEvents","radioRequests","_destroyRadio","stopReplying","getChannel","unbindRadioEvents","MarionetteObject","cid","cidPrefix","initialize","prototype","Events","isDestroyed","destroy","stopListening","TemplateCache","templateId","templateCaches","get","cachedTemplate","load","clear","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","Renderer","data","templateFunc","_invoke","invokeMap","invoke","BehaviorsMixin","_initBehaviors","_behaviors","_getBehaviorTriggers","triggers","_getBehaviorEvents","events","_proxyBehaviorViewProperties","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_destroyBehaviors","_bindBehaviorUIElements","_unbindBehaviorUIElements","_triggerEventOnBehaviors","DelegateEntityEventsMixin","_delegateEntityEvents","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","_getViewTriggers","_normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","_normalizeUIValues","properties","property","propertyVal","UIMixin","normalizeUIKeys","uiBindings","_getUIBindings","normalizeUIValues","_bindUIElements","_uiBindings","_ui","_unbindUIElements","_this2","$el","_getUI","ViewMixin","supportsRenderLifecycle","isRendered","isAttached","mixinTemplateContext","templateContext","delegateEvents","eventsArg","_buildEventProxies","viewEvents","_getEvents","combinedEvents","getTriggers","View","delegateEntityEvents","undelegateEntityEvents","_ensureViewIsIntact","unbindUIElements","_removeElement","_removeChildren","bindUIElements","getUI","childViewEventPrefix","ret","_triggerMethod","_triggerEventOnParentLayout","_childViewEvents","_childViewTriggers","layoutView","_parentView","eventPrefix","prefixedEventName","_len3","_key3","childViewEvents","childViewTriggers","parent","_parent","Region","replaceElement","_isReplaced","_initEl","getEl","show","_ensureElement","_ensureView","currentView","empty","_renderView","_attachView","shouldReplaceEl","attachHtml","allowMissingEl","_replaceEl","_restoreEl","parentNode","replaceChild","isReplaced","shouldReplace","appendChild","off","_removeView","_ref","preventDestroy","shouldPreventDestroy","_detachView","contents","hasView","reset","RegionsMixin","regionClass","_initRegions","regions","_regions","addRegions","_reInitRegions","addRegion","definition","isEmpty","_addRegions","regionDefinitions","_buildRegion","_addRegion","_buildRegionFromDefinition","_buildRegionFromObject","_buildRegionFromRegionClass","RegionClass","omit","defaults","parentEl","partial","region","removeRegion","_removeRegion","removeRegions","getRegions","bind","emptyRegions","hasRegion","getRegion","clone","showChildView","getChildView","serializeData","serializeModel","items","serializeCollection","attributes","_renderTemplate","getTemplate","attachElContent","compact","CollectionView","sort","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_startBuffering","_isBuffering","_endBuffering","triggerOnChildren","attachBuffer","_createBuffer","listenTo","_onCollectionAdd","_onCollectionRemove","_sortViews","opts","index","at","indexOf","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","ChildView","_getChildView","_addChild","children","findByModel","removeChildView","_checkEmpty","_renderChildren","setFilter","filter","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","models","_applyModelDeltas","removeFilter","currentIds","addedChildNotExists","prevModel","removedChildExists","reorder","anyModelsAdded","some","elsToReorder","_index","filteredOutViews","_appendReorderedChildren","resortView","_this3","orderChanged","find","item","_emptyViewIndex","append","_destroyChildren","checkEmpty","processedModels","_showEmptyView","_showCollection","_this4","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","_this5","comparator","sortBy","EmptyView","getEmptyView","_showingEmptyView","emptyViewOptions","buildChildView","_addChildView","childView","childViewOptions","addChildView","_updateIndices","increment","laterView","_proxyChildEvents","add","ChildViewClass","collectionView","buffer","elBuffer","createDocumentFragment","b","_insertBefore","_insertAfter","findPosition","before","_ref2","shouldCheckEmpty","childViews","identity","childEventName","values","_views","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","proxyViewProperties","getEvents","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","showView","getView","start","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","noConflict","Object","VERSION"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v3.0.0-pre.3\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone'), require('underscore'), require('backbone.radio'), require('backbone.babysitter')) :\n\ttypeof define === 'function' && define.amd ? define(['backbone', 'underscore', 'backbone.radio', 'backbone.babysitter'], factory) :\n\t(global.Marionette = this['Mn'] = factory(global.Backbone,global._,global.Backbone.Radio,global.Backbone.ChildViewContainer));\n}(this, function (Backbone,_,Radio,ChildViewContainer) { 'use strict';\n\n\tBackbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\t_ = 'default' in _ ? _['default'] : _;\n\tRadio = 'default' in Radio ? Radio['default'] : Radio;\n\tChildViewContainer = 'default' in ChildViewContainer ? ChildViewContainer['default'] : ChildViewContainer;\n\n\tvar babelHelpers = {};\n\n\tbabelHelpers.toConsumableArray = function (arr) {\n\t  if (Array.isArray(arr)) {\n\t    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n\t    return arr2;\n\t  } else {\n\t    return Array.from(arr);\n\t  }\n\t};\n\n\tbabelHelpers;\n\n\tvar version = \"3.0.0-pre.3\";\n\n\t//Internal utility for creating context style global utils\n\tvar proxy = function proxy(method) {\n\t  return function (context) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return method.apply(context, args);\n\t  };\n\t};\n\n\t// Borrow the Backbone `extend` method so we can use it as needed\n\tvar extend = Backbone.Model.extend;\n\n\t// Determine if `el` is a child of the document\n\tvar isNodeAttached = function isNodeAttached(el) {\n\t  return Backbone.$.contains(document.documentElement, el);\n\t};\n\n\t// Merge `keys` from `options` onto `this`\n\tvar mergeOptions = function mergeOptions(options, keys) {\n\t  if (!options) {\n\t    return;\n\t  }\n\t  _.extend(this, _.pick(options, keys));\n\t};\n\n\t// Marionette.getOption\n\t// --------------------\n\n\t// Retrieve an object, function or other value from the\n\t// object or its `options`, with `options` taking precedence.\n\tvar getOption = function getOption(optionName) {\n\t  if (!optionName) {\n\t    return;\n\t  }\n\t  if (this.options && this.options[optionName] !== undefined) {\n\t    return this.options[optionName];\n\t  } else {\n\t    return this[optionName];\n\t  }\n\t};\n\n\t// Marionette.normalizeMethods\n\t// ----------------------\n\n\t// Pass in a mapping of events => functions or function names\n\t// and return a mapping of events => functions\n\tvar normalizeMethods = function normalizeMethods(hash) {\n\t  var _this = this;\n\n\t  return _.reduce(hash, function (normalizedHash, method, name) {\n\t    if (!_.isFunction(method)) {\n\t      method = _this[method];\n\t    }\n\t    if (method) {\n\t      normalizedHash[name] = method;\n\t    }\n\t    return normalizedHash;\n\t  }, {});\n\t};\n\n\tvar deprecate = function deprecate(message, test) {\n\t  if (_.isObject(message)) {\n\t    message = message.prev + ' is going to be removed in the future. ' + 'Please use ' + message.next + ' instead.' + (message.url ? ' See: ' + message.url : '');\n\t  }\n\n\t  if (!Marionette.DEV_MODE) {\n\t    return;\n\t  }\n\n\t  if ((test === undefined || !test) && !deprecate._cache[message]) {\n\t    deprecate._warn('Deprecation warning: ' + message);\n\t    deprecate._cache[message] = true;\n\t  }\n\t};\n\n\tdeprecate._console = typeof console !== 'undefined' ? console : {};\n\tdeprecate._warn = function () {\n\t  var warn = deprecate._console.warn || deprecate._console.log || function () {};\n\t  return warn.apply(deprecate._console, arguments);\n\t};\n\tdeprecate._cache = {};\n\n\t// split the event name on the \":\"\n\tvar splitter = /(^|:)(\\w)/gi;\n\n\t// take the event section (\"section1:section2:section3\")\n\t// and turn it in to uppercase name onSection1Section2Section3\n\tfunction getEventName(match, prefix, eventName) {\n\t  return eventName.toUpperCase();\n\t}\n\n\t// Trigger an event and/or a corresponding method name. Examples:\n\t//\n\t// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n\t// call the \"onFoo\" method.\n\t//\n\t// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n\t// call the \"onFooBar\" method.\n\tfunction triggerMethod(event) {\n\t  // get the method name from the event name\n\t  var methodName = 'on' + event.replace(splitter, getEventName);\n\t  var method = getOption.call(this, methodName);\n\t  var result;\n\n\t  // call the onMethodName if it exists\n\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\n\t  if (_.isFunction(method)) {\n\t    // pass all args, except the event name\n\t    result = method.apply(this, args);\n\t  }\n\n\t  // trigger the event\n\t  this.trigger.apply(this, [event].concat(args));\n\n\t  return result;\n\t}\n\n\t// triggerMethodOn invokes triggerMethod on a specific context\n\t//\n\t// e.g. `Marionette.triggerMethodOn(view, 'show')`\n\t// will trigger a \"show\" event or invoke onShow the view.\n\tfunction triggerMethodOn(context) {\n\t  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n\n\t  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t    args[_key2 - 1] = arguments[_key2];\n\t  }\n\n\t  return fnc.apply(context, args);\n\t}\n\n\t// Trigger method on children unless a pure Backbone.View\n\tfunction triggerMethodChildren(view, event, shouldTrigger) {\n\t  if (!view._getImmediateChildren) {\n\t    return;\n\t  }\n\t  _.each(view._getImmediateChildren(), function (child) {\n\t    if (!shouldTrigger(child)) {\n\t      return;\n\t    }\n\t    triggerMethodOn(child, event, child);\n\t  });\n\t}\n\n\tfunction shouldTriggerAttach(view) {\n\t  return !view._isAttached;\n\t}\n\n\tfunction shouldAttach(view) {\n\t  if (!shouldTriggerAttach(view)) {\n\t    return false;\n\t  }\n\t  view._isAttached = true;\n\t}\n\n\tfunction shouldTriggerDetach(view) {\n\t  return view._isAttached;\n\t}\n\n\tfunction shouldDetach(view) {\n\t  if (!shouldTriggerDetach(view)) {\n\t    return false;\n\t  }\n\t  view._isAttached = false;\n\t}\n\n\t// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n\t// whenever a rendered view is attached or an attached view is rendered.\n\tfunction monitorViewEvents(view) {\n\t  if (view._areViewEventsMonitored) {\n\t    return;\n\t  }\n\n\t  view._areViewEventsMonitored = true;\n\n\t  function handleBeforeAttach() {\n\t    triggerMethodChildren(view, 'before:attach', shouldTriggerAttach);\n\t  }\n\n\t  function handleAttach() {\n\t    triggerMethodChildren(view, 'attach', shouldAttach);\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function handleBeforeDetach() {\n\t    triggerMethodChildren(view, 'before:detach', shouldTriggerDetach);\n\t  }\n\n\t  function handleDetach() {\n\t    triggerMethodChildren(view, 'detach', shouldDetach);\n\t  }\n\n\t  function handleRender() {\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function triggerDOMRefresh() {\n\t    if (view._isAttached && view._isRendered) {\n\t      triggerMethodOn(view, 'dom:refresh', view);\n\t    }\n\t  }\n\n\t  view.on({\n\t    'before:attach': handleBeforeAttach,\n\t    'attach': handleAttach,\n\t    'before:detach': handleBeforeDetach,\n\t    'detach': handleDetach,\n\t    'render': handleRender\n\t  });\n\t}\n\n\t// Similar to `_.result`, this is a simple helper\n\t// If a function is provided we call it with context\n\t// otherwise just return the value. If the value is\n\t// undefined return a default value\n\tvar getValue = function getValue(value) {\n\t  if (_.isFunction(value)) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return value.apply(this, args);\n\t  }\n\t  return value;\n\t};\n\n\t// Internal utility for setting options consistently across Mn\n\tvar _setOptions = function _setOptions() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\n\t  this.options = _.extend.apply(_, [{}, _.result(this, 'options')].concat(args));\n\t};\n\n\tvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\n\tvar MarionetteError = extend.call(Error, {\n\t  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n\t  constructor: function MarionetteError(message, options) {\n\t    if (_.isObject(message)) {\n\t      options = message;\n\t      message = options.message;\n\t    } else if (!options) {\n\t      options = {};\n\t    }\n\n\t    var error = Error.call(this, message);\n\t    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n\t    this.captureStackTrace();\n\n\t    if (options.url) {\n\t      this.url = this.urlRoot + options.url;\n\t    }\n\t  },\n\n\t  captureStackTrace: function captureStackTrace() {\n\t    if (Error.captureStackTrace) {\n\t      Error.captureStackTrace(this, MarionetteError);\n\t    }\n\t  },\n\n\t  toString: function toString() {\n\t    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n\t  }\n\t});\n\n\tMarionetteError.extend = extend;\n\n\t// Bind/unbind the event to handlers specified as a string of\n\t// handler names on the target object\n\tfunction bindFromStrings(target, entity, evt, methods, actionName) {\n\t  var methodNames = methods.split(/\\s+/);\n\n\t  _.each(methodNames, function (methodName) {\n\t    var method = target[methodName];\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was configured as an event handler, but does not exist.');\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\t// generic looping function\n\tfunction iterateEvents(target, entity, bindings, actionName) {\n\t  if (!entity || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindentityevents'\n\t    });\n\t  }\n\n\t  // iterate the bindings and bind/unbind them\n\t  _.each(bindings, function (method, evt) {\n\n\t    // allow for a list of method names as a string\n\t    if (_.isString(method)) {\n\t      bindFromStrings(target, entity, evt, method, actionName);\n\t      return;\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\tfunction bindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'listenTo');\n\t}\n\n\tfunction unbindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'stopListening');\n\t}\n\n\tvar CommonMixin = {\n\t  getValue: getValue,\n\n\t  // Imports the \"normalizeMethods\" to transform hashes of\n\t  // events=>function references/names to a hash of events=>function references\n\t  normalizeMethods: normalizeMethods,\n\n\t  _setOptions: _setOptions,\n\n\t  // A handy way to merge passed-in options onto the instance\n\t  mergeOptions: mergeOptions,\n\n\t  // Enable getting options from this or this.options by name.\n\t  getOption: getOption,\n\n\t  // Enable binding view's events from another entity.\n\t  bindEntityEvents: bindEntityEvents,\n\n\t  // Enable unbinding view's events from another entity.\n\t  unbindEntityEvents: unbindEntityEvents\n\t};\n\n\tfunction iterateReplies(target, channel, bindings, actionName) {\n\t  if (!channel || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindradiorequests'\n\t    });\n\t  }\n\n\t  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n\t  channel[actionName](normalizedRadioRequests, target);\n\t}\n\n\tfunction bindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'reply');\n\t}\n\n\tfunction unbindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'stopReplying');\n\t}\n\n\tvar RadioMixin = {\n\n\t  _initRadio: function _initRadio() {\n\t    var channelName = this.getValue(this.getOption('channelName'));\n\n\t    if (!channelName) {\n\t      return;\n\t    }\n\n\t    var channel = this._channel = Radio.channel(channelName);\n\n\t    var radioEvents = this.getValue(this.getOption('radioEvents'));\n\t    this.bindRadioEvents(channel, radioEvents);\n\n\t    var radioRequests = this.getValue(this.getOption('radioRequests'));\n\t    this.bindRadioRequests(channel, radioRequests);\n\n\t    this.on('destroy', this._destroyRadio);\n\t  },\n\n\t  _destroyRadio: function _destroyRadio() {\n\t    this._channel.stopReplying(null, null, this);\n\t  },\n\n\t  getChannel: function getChannel() {\n\t    return this._channel;\n\t  },\n\n\t  // Proxy `bindRadioEvents`\n\t  bindRadioEvents: bindEntityEvents,\n\n\t  // Proxy `unbindRadioEvents`\n\t  unbindRadioEvents: unbindEntityEvents,\n\n\t  // Proxy `bindRadioRequests`\n\t  bindRadioRequests: bindRadioRequests,\n\n\t  // Proxy `unbindRadioRequests`\n\t  unbindRadioRequests: unbindRadioRequests\n\n\t};\n\n\t// A Base Class that other Classes should descend from.\n\t// Object borrows many conventions and utilities from Backbone.\n\tvar MarionetteObject = function MarionetteObject(options) {\n\t  this._setOptions(options);\n\t  this.cid = _.uniqueId(this.cidPrefix);\n\t  this._initRadio();\n\t  this.initialize.apply(this, arguments);\n\t};\n\n\tMarionetteObject.extend = extend;\n\n\t// Object Methods\n\t// --------------\n\n\t// Ensure it can trigger events with Backbone.Events\n\t_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n\t  cidPrefix: 'mno',\n\n\t  // for parity with Marionette.AbstractView lifecyle\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return this._isDestroyed;\n\t  },\n\n\t  //this is a noop method intended to be overridden by classes that extend from this base\n\t  initialize: function initialize() {},\n\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\n\t    // mark as destroyed before doing the actual destroy, to\n\t    // prevent infinite loops within \"destroy\" event handlers\n\t    this._isDestroyed = true;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t// Manage templates stored in `<script>` blocks,\n\t// caching them for faster access.\n\tvar TemplateCache = function TemplateCache(templateId) {\n\t  this.templateId = templateId;\n\t};\n\n\t// TemplateCache object-level methods. Manage the template\n\t// caches from these method calls instead of creating\n\t// your own TemplateCache instances\n\t_.extend(TemplateCache, {\n\t  templateCaches: {},\n\n\t  // Get the specified template by id. Either\n\t  // retrieves the cached version, or loads it\n\t  // from the DOM.\n\t  get: function get(templateId, options) {\n\t    var cachedTemplate = this.templateCaches[templateId];\n\n\t    if (!cachedTemplate) {\n\t      cachedTemplate = new TemplateCache(templateId);\n\t      this.templateCaches[templateId] = cachedTemplate;\n\t    }\n\n\t    return cachedTemplate.load(options);\n\t  },\n\n\t  // Clear templates from the cache. If no arguments\n\t  // are specified, clears all templates:\n\t  // `clear()`\n\t  //\n\t  // If arguments are specified, clears each of the\n\t  // specified templates from the cache:\n\t  // `clear(\"#t1\", \"#t2\", \"...\")`\n\t  clear: function clear() {\n\t    var i;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    var length = args.length;\n\n\t    if (length > 0) {\n\t      for (i = 0; i < length; i++) {\n\t        delete this.templateCaches[args[i]];\n\t      }\n\t    } else {\n\t      this.templateCaches = {};\n\t    }\n\t  }\n\t});\n\n\t// TemplateCache instance methods, allowing each\n\t// template cache object to manage its own state\n\t// and know whether or not it has been loaded\n\t_.extend(TemplateCache.prototype, {\n\n\t  // Internal method to load the template\n\t  load: function load(options) {\n\t    // Guard clause to prevent loading this template more than once\n\t    if (this.compiledTemplate) {\n\t      return this.compiledTemplate;\n\t    }\n\n\t    // Load the template and compile it\n\t    var template = this.loadTemplate(this.templateId, options);\n\t    this.compiledTemplate = this.compileTemplate(template, options);\n\n\t    return this.compiledTemplate;\n\t  },\n\n\t  // Load a template from the DOM, by default. Override\n\t  // this method to provide your own template retrieval\n\t  // For asynchronous loading with AMD/RequireJS, consider\n\t  // using a template-loader plugin as described here:\n\t  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n\t  loadTemplate: function loadTemplate(templateId, options) {\n\t    var $template = Backbone.$(templateId);\n\n\t    if (!$template.length) {\n\t      throw new MarionetteError({\n\t        name: 'NoTemplateError',\n\t        message: 'Could not find template: \"' + templateId + '\"'\n\t      });\n\t    }\n\t    return $template.html();\n\t  },\n\n\t  // Pre-compile the template before caching it. Override\n\t  // this method if you do not need to pre-compile a template\n\t  // (JST / RequireJS for example) or if you want to change\n\t  // the template engine used (Handebars, etc).\n\t  compileTemplate: function compileTemplate(rawTemplate, options) {\n\t    return _.template(rawTemplate, options);\n\t  }\n\t});\n\n\t// Render a template with data by passing in the template\n\t// selector and the data to render.\n\tvar Renderer = {\n\n\t  // Render a template with data. The `template` parameter is\n\t  // passed to the `TemplateCache` object to retrieve the\n\t  // template function. Override this method to provide your own\n\t  // custom rendering and template handling for all of Marionette.\n\t  render: function render(template, data) {\n\t    if (!template) {\n\t      throw new MarionetteError({\n\t        name: 'TemplateNotFoundError',\n\t        message: 'Cannot render the template since its false, null or undefined.'\n\t      });\n\t    }\n\n\t    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n\t    return templateFunc(data);\n\t  }\n\t};\n\n\tvar _invoke = _.invokeMap || _.invoke;\n\n\t// Takes care of getting the behavior class\n\t// given options and a key.\n\t// If a user passes in options.behaviorClass\n\t// default to using that.\n\t// If a user passes in a Behavior Class directly, use that\n\t// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\n\tfunction getBehaviorClass(options, key) {\n\t  if (options.behaviorClass) {\n\t    return options.behaviorClass;\n\t    //treat functions as a Behavior constructor\n\t  } else if (_.isFunction(options)) {\n\t      return options;\n\t    }\n\n\t  // behaviorsLookup can be either a flat object or a method\n\t  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n\t}\n\n\t// Iterate over the behaviors object, for each behavior\n\t// instantiate it and get its grouped behaviors.\n\t// This accepts a list of behaviors in either an object or array form\n\tfunction parseBehaviors(view, behaviors) {\n\t  return _.chain(behaviors).map(function (options, key) {\n\t    var BehaviorClass = getBehaviorClass(options, key);\n\t    //if we're passed a class directly instead of an object\n\t    var _options = options === BehaviorClass ? {} : options;\n\t    var behavior = new BehaviorClass(_options, view);\n\t    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n\t    return [behavior].concat(nestedBehaviors);\n\t  }).flatten().value();\n\t}\n\n\tvar BehaviorsMixin = {\n\t  _initBehaviors: function _initBehaviors() {\n\t    var behaviors = this.getValue(this.getOption('behaviors'));\n\n\t    // Behaviors defined on a view can be a flat object literal\n\t    // or it can be a function that returns an object.\n\t    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n\t  },\n\n\t  _getBehaviorTriggers: function _getBehaviorTriggers() {\n\t    var triggers = _invoke(this._behaviors, 'getTriggers');\n\t    return _.extend.apply(_, [{}].concat(babelHelpers.toConsumableArray(triggers)));\n\t  },\n\n\t  _getBehaviorEvents: function _getBehaviorEvents() {\n\t    var events = _invoke(this._behaviors, 'getEvents');\n\t    return _.extend.apply(_, [{}].concat(babelHelpers.toConsumableArray(events)));\n\t  },\n\n\t  // proxy behavior $el to the view's $el.\n\t  _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n\t    _invoke(this._behaviors, 'proxyViewProperties');\n\t  },\n\n\t  // delegate modelEvents and collectionEvents\n\t  _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n\t    _invoke(this._behaviors, 'delegateEntityEvents');\n\t  },\n\n\t  // undelegate modelEvents and collectionEvents\n\t  _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n\t    _invoke(this._behaviors, 'undelegateEntityEvents');\n\t  },\n\n\t  _destroyBehaviors: function _destroyBehaviors(args) {\n\t    // Call destroy on each behavior after\n\t    // destroying the view.\n\t    // This unbinds event listeners\n\t    // that behaviors have registered for.\n\t    _invoke.apply(undefined, [this._behaviors, 'destroy'].concat(babelHelpers.toConsumableArray(args)));\n\t  },\n\n\t  _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n\t    _invoke(this._behaviors, 'bindUIElements');\n\t  },\n\n\t  _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n\t    _invoke(this._behaviors, 'unbindUIElements');\n\t  },\n\n\t  _triggerEventOnBehaviors: function _triggerEventOnBehaviors() {\n\t    var behaviors = this._behaviors;\n\t    // Use good ol' for as this is a very hot function\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n\t      triggerMethod.apply(behaviors[i], args);\n\t    }\n\t  }\n\t};\n\n\tvar DelegateEntityEventsMixin = {\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n\t    this._undelegateEntityEvents(model, collection);\n\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    bindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    bindEntityEvents.call(this, collection, collectionEvents);\n\t  },\n\n\t  _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    unbindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    unbindEntityEvents.call(this, collection, collectionEvents);\n\t  }\n\t};\n\n\t// Borrow event splitter from Backbone\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n\tfunction uniqueName(eventName, selector) {\n\t  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n\t}\n\n\t// Set event name to be namespaced using a unique index\n\t// to generate a non colliding event namespace\n\t// http://api.jquery.com/event.namespace/\n\tvar getUniqueEventName = function getUniqueEventName(eventName) {\n\t  var match = eventName.match(delegateEventSplitter);\n\t  return uniqueName(match[1], match[2]);\n\t};\n\n\t// Internal method to create an event handler for a given `triggerDef` like\n\t// 'click:foo'\n\tfunction buildViewTrigger(view, triggerDef) {\n\t  if (_.isString(triggerDef)) {\n\t    triggerDef = { event: triggerDef };\n\t  }\n\n\t  var eventName = triggerDef.event;\n\t  var shouldPreventDefault = triggerDef.preventDefault !== false;\n\t  var shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n\t  return function (e) {\n\t    if (shouldPreventDefault) {\n\t      e.preventDefault();\n\t    }\n\n\t    if (shouldStopPropagation) {\n\t      e.stopPropagation();\n\t    }\n\n\t    view.triggerMethod(eventName, view);\n\t  };\n\t}\n\n\tvar TriggersMixin = {\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  _getViewTriggers: function _getViewTriggers(view, triggers) {\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return _.reduce(triggers, function (events, value, key) {\n\t      key = getUniqueEventName(key);\n\t      events[key] = buildViewTrigger(view, value);\n\t      return events;\n\t    }, {});\n\t  }\n\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given key for triggers and events\n\t// swaps the @ui with the associated selector.\n\t// Returns a new, non-mutated, parsed events hash.\n\tvar _normalizeUIKeys = function _normalizeUIKeys(hash, ui) {\n\t  return _.reduce(hash, function (memo, val, key) {\n\t    var normalizedKey = normalizeUIString(key, ui);\n\t    memo[normalizedKey] = val;\n\t    return memo;\n\t  }, {});\n\t};\n\n\t// utility method for parsing @ui. syntax strings\n\t// into associated selector\n\tvar normalizeUIString = function normalizeUIString(uiString, ui) {\n\t  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function (r) {\n\t    return ui[r.slice(4)];\n\t  });\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given value for regions\n\t// swaps the @ui with the associated selector\n\tvar _normalizeUIValues = function _normalizeUIValues(hash, ui, properties) {\n\t  _.each(hash, function (val, key) {\n\t    if (_.isString(val)) {\n\t      hash[key] = normalizeUIString(val, ui);\n\t    } else if (_.isObject(val) && _.isArray(properties)) {\n\t      _.extend(val, _normalizeUIValues(_.pick(val, properties), ui));\n\t      /* Value is an object, and we got an array of embedded property names to normalize. */\n\t      _.each(properties, function (property) {\n\t        var propertyVal = val[property];\n\t        if (_.isString(propertyVal)) {\n\t          val[property] = normalizeUIString(propertyVal, ui);\n\t        }\n\t      });\n\t    }\n\t  });\n\t  return hash;\n\t};\n\n\tvar UIMixin = {\n\n\t  // normalize the keys of passed hash with the views `ui` selectors.\n\t  // `{\"@ui.foo\": \"bar\"}`\n\t  normalizeUIKeys: function normalizeUIKeys(hash) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIKeys(hash, uiBindings);\n\t  },\n\n\t  // normalize the values of passed hash with the views `ui` selectors.\n\t  // `{foo: \"@ui.bar\"}`\n\t  normalizeUIValues: function normalizeUIValues(hash, properties) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIValues(hash, uiBindings, properties);\n\t  },\n\n\t  _getUIBindings: function _getUIBindings() {\n\t    var uiBindings = _.result(this, '_uiBindings');\n\t    var ui = _.result(this, 'ui');\n\t    return uiBindings || ui;\n\t  },\n\n\t  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n\t  // the associated jQuery selectors.\n\t  _bindUIElements: function _bindUIElements() {\n\t    var _this = this;\n\n\t    if (!this.ui) {\n\t      return;\n\t    }\n\n\t    // store the ui hash in _uiBindings so they can be reset later\n\t    // and so re-rendering the view will be able to find the bindings\n\t    if (!this._uiBindings) {\n\t      this._uiBindings = this.ui;\n\t    }\n\n\t    // get the bindings result, as a function or otherwise\n\t    var bindings = _.result(this, '_uiBindings');\n\n\t    // empty the ui so we don't have anything to start with\n\t    this._ui = {};\n\n\t    // bind each of the selectors\n\t    _.each(bindings, function (selector, key) {\n\t      _this._ui[key] = _this.$(selector);\n\t    });\n\n\t    this.ui = this._ui;\n\t  },\n\n\t  _unbindUIElements: function _unbindUIElements() {\n\t    var _this2 = this;\n\n\t    if (!this.ui || !this._uiBindings) {\n\t      return;\n\t    }\n\n\t    // delete all of the existing ui bindings\n\t    _.each(this.ui, function ($el, name) {\n\t      delete _this2.ui[name];\n\t    });\n\n\t    // reset the ui element to the original bindings configuration\n\t    this.ui = this._uiBindings;\n\t    delete this._uiBindings;\n\t    delete this._ui;\n\t  },\n\n\t  _getUI: function _getUI(name) {\n\t    return this._ui[name];\n\t  }\n\t};\n\n\tvar ViewMixin = {\n\t  supportsRenderLifecycle: true,\n\t  supportsDestroyLifecycle: true,\n\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return !!this._isDestroyed;\n\t  },\n\n\t  _isRendered: false,\n\n\t  isRendered: function isRendered() {\n\t    return !!this._isRendered;\n\t  },\n\n\t  _isAttached: false,\n\n\t  isAttached: function isAttached() {\n\t    return !!this._isAttached;\n\t  },\n\n\n\t  // Mix in template context methods. Looks for a\n\t  // `templateContext` attribute, which can either be an\n\t  // object literal, or a function that returns an object\n\t  // literal. All methods and attributes from this object\n\t  // are copies to the object passed in.\n\t  mixinTemplateContext: function mixinTemplateContext() {\n\t    var target = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var templateContext = this.getValue(this.getOption('templateContext'));\n\t    return _.extend(target, templateContext);\n\t  },\n\n\t  // Overriding Backbone.View's `delegateEvents` to handle\n\t  // `events` and `triggers`\n\t  delegateEvents: function delegateEvents(eventsArg) {\n\n\t    this._proxyBehaviorViewProperties();\n\t    this._buildEventProxies();\n\n\t    var viewEvents = this._getEvents(eventsArg);\n\n\t    if (typeof eventsArg === 'undefined') {\n\t      this.events = viewEvents;\n\t    }\n\n\t    var combinedEvents = _.extend({}, this._getBehaviorEvents(), viewEvents, this._getBehaviorTriggers(), this.getTriggers());\n\n\t    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n\t    return this;\n\t  },\n\n\t  _getEvents: function _getEvents(eventsArg) {\n\t    var events = this.getValue(eventsArg || this.events);\n\n\t    return this.normalizeUIKeys(events);\n\t  },\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Allow `triggers` to be configured as a function\n\t    var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return this._getViewTriggers(this, triggers);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.model, this.collection);\n\n\t    // bind each behaviors model and collection events\n\t    this._delegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.model, this.collection);\n\n\t    // unbind each behaviors model and collection events\n\t    this._undelegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Internal helper method to verify whether the view hasn't been destroyed\n\t  _ensureViewIsIntact: function _ensureViewIsIntact() {\n\t    if (this._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\t  // Handle destroying the view and its children.\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\t    var shouldTriggerDetach = !!this._isAttached;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\t    if (shouldTriggerDetach) {\n\t      this.triggerMethod('before:detach', this);\n\t    }\n\n\t    // unbind UI elements\n\t    this.unbindUIElements();\n\n\t    // remove the view from the DOM\n\t    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n\t    this._removeElement();\n\n\t    if (shouldTriggerDetach) {\n\t      this._isAttached = false;\n\t      this.triggerMethod('detach', this);\n\t    }\n\n\t    // remove children after the remove to prevent extra paints\n\t    this._removeChildren();\n\n\t    this._destroyBehaviors(args);\n\n\t    this._isDestroyed = true;\n\t    this._isRendered = false;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\t    this._bindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  // This method unbinds the elements specified in the \"ui\" hash\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\t    this._unbindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // used as the prefix for child view events\n\t  // that are forwarded through the layoutview\n\t  childViewEventPrefix: 'childview',\n\n\t  // import the `triggerMethod` to trigger events with corresponding\n\t  // methods if the method exists\n\t  triggerMethod: function triggerMethod$$() {\n\t    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      args[_key2] = arguments[_key2];\n\t    }\n\n\t    var ret = triggerMethod.apply(this, args);\n\n\t    this._triggerEventOnBehaviors.apply(this, args);\n\t    this._triggerEventOnParentLayout.apply(this, args);\n\n\t    return ret;\n\t  },\n\n\t  // Cache `childViewEvents` and `childViewTriggers`\n\t  _buildEventProxies: function _buildEventProxies() {\n\t    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n\t    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n\t  },\n\n\t  _triggerEventOnParentLayout: function _triggerEventOnParentLayout(eventName) {\n\t    var layoutView = this._parentView();\n\t    if (!layoutView) {\n\t      return;\n\t    }\n\n\t    // invoke triggerMethod on parent view\n\t    var eventPrefix = layoutView.getOption('childViewEventPrefix');\n\t    var prefixedEventName = eventPrefix + ':' + eventName;\n\n\t    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t      args[_key3 - 1] = arguments[_key3];\n\t    }\n\n\t    layoutView.triggerMethod.apply(layoutView, [prefixedEventName].concat(args));\n\n\t    // use the parent view's childViewEvents handler\n\t    var childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n\t    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n\t      childViewEvents[eventName].apply(layoutView, args);\n\t    }\n\n\t    // use the parent view's proxyEvent handlers\n\t    var childViewTriggers = layoutView._childViewTriggers;\n\n\t    // Call the event with the proxy name on the parent layout\n\t    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n\t      layoutView.triggerMethod.apply(layoutView, [childViewTriggers[eventName]].concat(args));\n\t    }\n\t  },\n\n\t  // Walk the _parent tree until we find a view (if one exists).\n\t  // Returns the parent view hierarchically closest to this view.\n\t  _parentView: function _parentView() {\n\t    var parent = this._parent;\n\n\t    while (parent) {\n\t      if (parent instanceof View) {\n\t        return parent;\n\t      }\n\t      parent = parent._parent;\n\t    }\n\t  }\n\t};\n\n\t_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\tfunction destroyBackboneView(view) {\n\t  if (!view.supportsDestroyLifecycle) {\n\t    triggerMethodOn(view, 'before:destroy', view);\n\t  }\n\n\t  var shouldTriggerDetach = !!view._isAttached;\n\n\t  if (shouldTriggerDetach) {\n\t    triggerMethodOn(view, 'before:detach', view);\n\t  }\n\n\t  view.remove();\n\n\t  if (shouldTriggerDetach) {\n\t    view._isAttached = false;\n\t    triggerMethodOn(view, 'detach', view);\n\t  }\n\n\t  view._isDestroyed = true;\n\n\t  if (!view.supportsDestroyLifecycle) {\n\t    triggerMethodOn(view, 'destroy', view);\n\t  }\n\t}\n\n\tvar Region = MarionetteObject.extend({\n\t  cidPrefix: 'mnr',\n\t  replaceElement: false,\n\t  _isReplaced: false,\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\t    this._initEl = this.el = this.getOption('el');\n\n\t    // Handle when this.el is passed in as a $ wrapped element.\n\t    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n\t    if (!this.el) {\n\t      throw new MarionetteError({\n\t        name: 'NoElError',\n\t        message: 'An \"el\" must be specified for a region.'\n\t      });\n\t    }\n\n\t    this.$el = this.getEl(this.el);\n\t    MarionetteObject.call(this, options);\n\t  },\n\n\n\t  // Displays a backbone view instance inside of the region. Handles calling the `render`\n\t  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n\t  // option can be used to prevent a view from the old view being destroyed on show.\n\t  show: function show(view, options) {\n\t    if (!this._ensureElement(options)) {\n\t      return;\n\t    }\n\t    this._ensureView(view);\n\t    if (view === this.currentView) {\n\t      return this;\n\t    }\n\n\t    this.triggerMethod('before:show', this, view, options);\n\n\t    monitorViewEvents(view);\n\n\t    this.empty(options);\n\n\t    // We need to listen for if a view is destroyed in a way other than through the region.\n\t    // If this happens we need to remove the reference to the currentView since once a view\n\t    // has been destroyed we can not reuse it.\n\t    view.on('destroy', this.empty, this);\n\n\t    // Make this region the view's parent.\n\t    // It's important that this parent binding happens before rendering so that any events\n\t    // the child may trigger during render can also be triggered on the child's ancestor views.\n\t    view._parent = this;\n\n\t    this._renderView(view);\n\n\t    this._attachView(view, options);\n\n\t    this.triggerMethod('show', this, view, options);\n\t    return this;\n\t  },\n\t  _renderView: function _renderView(view) {\n\t    if (view._isRendered) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\t  },\n\t  _attachView: function _attachView(view) {\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n\t    var shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!this.getOption('replaceElement') : !!options.replaceElement;\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    this.attachHtml(view, shouldReplaceEl);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\n\t    this.currentView = view;\n\t  },\n\t  _ensureElement: function _ensureElement() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    if (!_.isObject(this.el)) {\n\t      this.$el = this.getEl(this.el);\n\t      this.el = this.$el[0];\n\t    }\n\n\t    if (!this.$el || this.$el.length === 0) {\n\t      var allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!this.getOption('allowMissingEl') : !!options.allowMissingEl;\n\n\t      if (allowMissingEl) {\n\t        return false;\n\t      } else {\n\t        throw new MarionetteError('An \"el\" must exist in DOM for this region ' + this.cid);\n\t      }\n\t    }\n\t    return true;\n\t  },\n\t  _ensureView: function _ensureView(view) {\n\t    if (!view) {\n\t      throw new MarionetteError({\n\t        name: 'ViewNotValid',\n\t        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n\t      });\n\t    }\n\n\t    if (view._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Override this method to change how the region finds the DOM element that it manages. Return\n\t  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n\t  getEl: function getEl(el) {\n\t    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n\t  },\n\t  _replaceEl: function _replaceEl(view) {\n\t    // always restore the el to ensure the regions el is present before replacing\n\t    this._restoreEl();\n\n\t    var parent = this.el.parentNode;\n\n\t    parent.replaceChild(view.el, this.el);\n\t    this._isReplaced = true;\n\t  },\n\n\n\t  // Restore the region's element in the DOM.\n\t  _restoreEl: function _restoreEl() {\n\t    if (!this.currentView) {\n\t      return;\n\t    }\n\n\t    var view = this.currentView;\n\t    var parent = view.el.parentNode;\n\n\t    if (!parent) {\n\t      return;\n\t    }\n\n\t    parent.replaceChild(this.el, view.el);\n\t    this._isReplaced = false;\n\t  },\n\t  isReplaced: function isReplaced() {\n\t    return !!this._isReplaced;\n\t  },\n\n\n\t  // Override this method to change how the new view is appended to the `$el` that the\n\t  // region is managing\n\t  attachHtml: function attachHtml(view, shouldReplace) {\n\t    if (shouldReplace) {\n\t      // replace the region's node with the view's node\n\t      this._replaceEl(view);\n\t    } else {\n\t      this.el.appendChild(view.el);\n\t    }\n\t  },\n\n\n\t  // Destroy the current view, if there is one. If there is no current view, it does\n\t  // nothing and returns immediately.\n\t  empty: function empty(options) {\n\t    var view = this.currentView;\n\n\t    // If there is no view in the region we should not remove anything\n\t    if (!view) {\n\t      return this;\n\t    }\n\n\t    view.off('destroy', this.empty, this);\n\t    this.triggerMethod('before:empty', this, view);\n\n\t    if (this._isReplaced) {\n\t      this._restoreEl();\n\t    }\n\n\t    if (!view._isDestroyed) {\n\t      this._removeView(view, options);\n\t    }\n\n\t    delete this.currentView._parent;\n\t    delete this.currentView;\n\n\t    this.triggerMethod('empty', this, view);\n\t    return this;\n\t  },\n\t  _removeView: function _removeView(view) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventDestroy = _ref.preventDestroy;\n\n\t    var shouldPreventDestroy = !!preventDestroy;\n\n\t    if (shouldPreventDestroy) {\n\t      this._detachView(view);\n\t      return;\n\t    }\n\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      destroyBackboneView(view);\n\t    }\n\t  },\n\t  _detachView: function _detachView(view) {\n\t    var shouldTriggerDetach = !!view._isAttached;\n\n\t    if (shouldTriggerDetach) {\n\t      triggerMethodOn(view, 'before:detach', view);\n\t    }\n\n\t    this.$el.contents().detach();\n\n\t    if (shouldTriggerDetach) {\n\t      view._isAttached = false;\n\t      triggerMethodOn(view, 'detach', view);\n\t    }\n\t  },\n\n\n\t  // Checks whether a view is currently present within the region. Returns `true` if there is\n\t  // and `false` if no view is present.\n\t  hasView: function hasView() {\n\t    return !!this.currentView;\n\t  },\n\n\n\t  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n\t  // The next time a view is shown via this region, the region will re-query the DOM for\n\t  // the region's `el`.\n\t  reset: function reset() {\n\t    this.empty();\n\n\t    if (this.$el) {\n\t      this.el = this._initEl;\n\t    }\n\n\t    delete this.$el;\n\t    return this;\n\t  },\n\n\n\t  destroy: function destroy() {\n\t    this.reset();\n\t    return MarionetteObject.prototype.destroy.apply(this, arguments);\n\t  }\n\t});\n\n\tvar RegionsMixin = {\n\t  regionClass: Region,\n\n\t  // Internal method to initialize the regions that have been defined in a\n\t  // `regions` attribute on this View.\n\t  _initRegions: function _initRegions() {\n\n\t    // init regions hash\n\t    this.regions = this.regions || {};\n\t    this._regions = {};\n\n\t    this.addRegions(this.getValue(this.getOption('regions')));\n\t  },\n\n\t  // Internal method to re-initialize all of the regions by updating\n\t  // the `el` that they point to\n\t  _reInitRegions: function _reInitRegions() {\n\t    _invoke(this._regions, 'reset');\n\t  },\n\n\t  // Add a single region, by name, to the View\n\t  addRegion: function addRegion(name, definition) {\n\t    var regions = {};\n\t    regions[name] = definition;\n\t    return this.addRegions(regions)[name];\n\t  },\n\n\t  // Add multiple regions as a {name: definition, name2: def2} object literal\n\t  addRegions: function addRegions(regions) {\n\t    // If there's nothing to add, stop here.\n\t    if (_.isEmpty(regions)) {\n\t      return;\n\t    }\n\n\t    // Normalize region selectors hash to allow\n\t    // a user to use the @ui. syntax.\n\t    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n\t    // Add the regions definitions to the regions property\n\t    this.regions = _.extend({}, this.regions, regions);\n\n\t    return this._addRegions(regions);\n\t  },\n\n\t  // internal method to build and add regions\n\t  _addRegions: function _addRegions(regionDefinitions) {\n\t    var _this = this;\n\n\t    return _.reduce(regionDefinitions, function (regions, definition, name) {\n\t      regions[name] = _this._buildRegion(definition);\n\t      _this._addRegion(regions[name], name);\n\t      return regions;\n\t    }, {});\n\t  },\n\n\t  // return the region instance from the definition\n\t  _buildRegion: function _buildRegion(definition) {\n\t    if (definition instanceof Region) {\n\t      return definition;\n\t    }\n\n\t    return this._buildRegionFromDefinition(definition);\n\t  },\n\n\t  _buildRegionFromDefinition: function _buildRegionFromDefinition(definition) {\n\t    if (_.isString(definition)) {\n\t      return this._buildRegionFromObject({ el: definition });\n\t    }\n\n\t    if (_.isFunction(definition)) {\n\t      return this._buildRegionFromRegionClass(definition);\n\t    }\n\n\t    if (_.isObject(definition)) {\n\t      return this._buildRegionFromObject(definition);\n\t    }\n\n\t    throw new MarionetteError({\n\t      message: 'Improper region configuration type.',\n\t      url: 'marionette.region.html#region-configuration-types'\n\t    });\n\t  },\n\n\t  _buildRegionFromObject: function _buildRegionFromObject(definition) {\n\t    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n\t    var options = _.omit(definition, 'regionClass');\n\n\t    _.defaults(options, {\n\t      el: definition.selector,\n\t      parentEl: _.partial(_.result, this, 'el')\n\t    });\n\n\t    return new RegionClass(options);\n\t  },\n\n\t  // Build the region directly from a given `RegionClass`\n\t  _buildRegionFromRegionClass: function _buildRegionFromRegionClass(RegionClass) {\n\t    return new RegionClass({\n\t      parentEl: _.partial(_.result, this, 'el')\n\t    });\n\t  },\n\n\t  _addRegion: function _addRegion(region, name) {\n\t    this.triggerMethod('before:add:region', name, region);\n\n\t    region._parent = this;\n\n\t    this._regions[name] = region;\n\n\t    this.triggerMethod('add:region', name, region);\n\t  },\n\n\t  // Remove a single region from the View, by name\n\t  removeRegion: function removeRegion(name) {\n\t    var region = this._regions[name];\n\n\t    this._removeRegion(region, name);\n\n\t    return region;\n\t  },\n\n\t  // Remove all regions from the View\n\t  removeRegions: function removeRegions() {\n\t    var regions = this.getRegions();\n\n\t    _.each(this._regions, _.bind(this._removeRegion, this));\n\n\t    return regions;\n\t  },\n\n\t  _removeRegion: function _removeRegion(region, name) {\n\t    this.triggerMethod('before:remove:region', name, region);\n\n\t    region.empty();\n\t    region.stopListening();\n\n\t    delete this.regions[name];\n\t    delete this._regions[name];\n\n\t    this.triggerMethod('remove:region', name, region);\n\t  },\n\n\t  // Empty all regions in the region manager, but\n\t  // leave them attached\n\t  emptyRegions: function emptyRegions() {\n\t    var regions = this.getRegions();\n\t    _invoke(regions, 'empty');\n\t    return regions;\n\t  },\n\n\t  // Checks to see if view contains region\n\t  // Accepts the region name\n\t  // hasRegion('main')\n\t  hasRegion: function hasRegion(name) {\n\t    return !!this.getRegion(name);\n\t  },\n\n\t  // Provides access to regions\n\t  // Accepts the region name\n\t  // getRegion('main')\n\t  getRegion: function getRegion(name) {\n\t    return this._regions[name];\n\t  },\n\n\t  // Get all regions\n\t  getRegions: function getRegions() {\n\t    return _.clone(this._regions);\n\t  },\n\n\t  showChildView: function showChildView(name, view) {\n\t    var region = this.getRegion(name);\n\n\t    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      args[_key - 2] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getChildView: function getChildView(name) {\n\t    return this.getRegion(name).currentView;\n\t  }\n\n\t};\n\n\t// The standard view. Includes view events, automatic rendering\n\t// of Underscore templates, nested views, and more.\n\tvar View = Backbone.View.extend({\n\t  constructor: function constructor(options) {\n\t    this.render = _.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    monitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this._initRegions();\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\n\t  // Serialize the view's model *or* collection, if\n\t  // it exists, for the template\n\t  serializeData: function serializeData() {\n\t    if (!this.model && !this.collection) {\n\t      return {};\n\t    }\n\n\t    // If we have a model, we serialize that\n\t    if (this.model) {\n\t      return this.serializeModel();\n\t    }\n\n\t    // Otherwise, we serialize the collection,\n\t    // making it available under the `items` property\n\t    return {\n\t      items: this.serializeCollection()\n\t    };\n\t  },\n\n\n\t  // Prepares the special `model` property of a view\n\t  // for being displayed in the template. By default\n\t  // we simply clone the attributes. Override this if\n\t  // you need a custom transformation for your view's model\n\t  serializeModel: function serializeModel() {\n\t    if (!this.model) {\n\t      return {};\n\t    }\n\t    return _.clone(this.model.attributes);\n\t  },\n\n\n\t  // Serialize a collection by cloning each of\n\t  // its model's attributes\n\t  serializeCollection: function serializeCollection() {\n\t    if (!this.collection) {\n\t      return {};\n\t    }\n\t    return this.collection.map(function (model) {\n\t      return _.clone(model.attributes);\n\t    });\n\t  },\n\n\n\t  // Render the view, defaulting to underscore.js templates.\n\t  // You can override this in your view definition to provide\n\t  // a very specific rendering for your view. In general, though,\n\t  // you should override the `Marionette.Renderer` object to\n\t  // change how Marionette renders views.\n\t  // Subsequent renders after the first will re-render all nested\n\t  // views.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    // If this is not the first render call, then we need to\n\t    // re-initialize the `el` for each region\n\t    if (this._isRendered) {\n\t      this._reInitRegions();\n\t    }\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\n\t    return this;\n\t  },\n\n\n\t  // Internal method to render the template with the serialized data\n\t  // and template context via the `Marionette.Renderer` object.\n\t  _renderTemplate: function _renderTemplate() {\n\t    var template = this.getTemplate();\n\n\t    // Allow template-less views\n\t    if (template === false) {\n\t      return;\n\t    }\n\n\t    // Add in entity data and template context\n\t    var data = this.mixinTemplateContext(this.serializeData());\n\n\t    // Render and add to el\n\t    var html = Renderer.render(template, data, this);\n\t    this.attachElContent(html);\n\t  },\n\n\n\t  // Get the template for this view\n\t  // instance. You can set a `template` attribute in the view\n\t  // definition or pass a `template: \"whatever\"` parameter in\n\t  // to the constructor options.\n\t  getTemplate: function getTemplate() {\n\t    return this.getOption('template');\n\t  },\n\n\n\t  // Attaches the content of a given view.\n\t  // This method can be overridden to optimize rendering,\n\t  // or to render in a non standard way.\n\t  //\n\t  // For example, using `innerHTML` instead of `$el.html`\n\t  //\n\t  // ```js\n\t  // attachElContent(html) {\n\t  //   this.el.innerHTML = html;\n\t  //   return this;\n\t  // }\n\t  // ```\n\t  attachElContent: function attachElContent(html) {\n\t    this.$el.html(html);\n\n\t    return this;\n\t  },\n\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this.removeRegions();\n\t  },\n\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _.chain(this.getRegions()).map('currentView').compact().value();\n\t  }\n\t});\n\n\t_.extend(View.prototype, ViewMixin, RegionsMixin);\n\n\t// A view that iterates over a Backbone.Collection\n\t// and renders an individual child view for each model.\n\tvar CollectionView = Backbone.View.extend({\n\n\t  // flag for maintaining the sorted order of the collection\n\t  sort: true,\n\n\t  // constructor\n\t  // option to pass `{sort: false}` to prevent the `CollectionView` from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  //\n\t  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n\t  // to use a custom sort order for the collection.\n\t  constructor: function constructor(options) {\n\t    this.render = _.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    monitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this.once('render', this._initialEvents);\n\t    this._initChildViewStorage();\n\t    this._bufferedChildren = [];\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\n\t  // Instead of inserting elements one by one into the page, it's much more performant to insert\n\t  // elements into a document fragment and then insert that document fragment into the page\n\t  _startBuffering: function _startBuffering() {\n\t    this._isBuffering = true;\n\t  },\n\t  _endBuffering: function _endBuffering() {\n\t    var shouldTriggerAttach = !!this._isAttached;\n\t    var triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n\t    this._isBuffering = false;\n\n\t    _.each(triggerOnChildren, function (child) {\n\t      triggerMethodOn(child, 'before:attach', child);\n\t    });\n\n\t    this.attachBuffer(this, this._createBuffer());\n\n\t    _.each(triggerOnChildren, function (child) {\n\t      child._isAttached = true;\n\t      triggerMethodOn(child, 'attach', child);\n\t    });\n\n\t    this._bufferedChildren = [];\n\t  },\n\n\n\t  // Configured the initial events that the collection view binds to.\n\t  _initialEvents: function _initialEvents() {\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.render);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Handle a child added to the collection\n\t  _onCollectionAdd: function _onCollectionAdd(child, collection, opts) {\n\t    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n\t    var index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n\t    // When filtered or when there is no initial index, calculate index.\n\t    if (this.getOption('filter') || index === false) {\n\t      index = _.indexOf(this._filteredSortedModels(index), child);\n\t    }\n\n\t    if (this._shouldAddChild(child, index)) {\n\t      this._destroyEmptyView();\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }\n\t  },\n\n\n\t  // get the child view by model it holds, and remove it\n\t  _onCollectionRemove: function _onCollectionRemove(model) {\n\t    var view = this.children.findByModel(model);\n\t    this.removeChildView(view);\n\t    this._checkEmpty();\n\t  },\n\n\n\t  // Render children views. Override this method to provide your own implementation of a\n\t  // render function for the collection view.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this.triggerMethod('before:render', this);\n\t    this._renderChildren();\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\n\t  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n\t  // collection view, we are only adding or removing the related childrenViews.\n\t  setFilter: function setFilter(filter) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventRender = _ref.preventRender;\n\n\t    var canBeRendered = this._isRendered && !this._isDestroyed;\n\t    var filterChanged = this.filter !== filter;\n\t    var shouldRender = canBeRendered && filterChanged && !preventRender;\n\n\t    if (shouldRender) {\n\t      this.triggerMethod('before:apply:filter', this);\n\t      var previousModels = this._filteredSortedModels();\n\t      this.filter = filter;\n\t      var models = this._filteredSortedModels();\n\t      this._applyModelDeltas(models, previousModels);\n\t      this.triggerMethod('apply:filter', this);\n\t    } else {\n\t      this.filter = filter;\n\t    }\n\t  },\n\n\n\t  // `removeFilter` is actually an alias for removing filters.\n\t  removeFilter: function removeFilter(options) {\n\t    this.setFilter(null, options);\n\t  },\n\n\n\t  // Calculate and apply difference by cid between `models` and `previousModels`.\n\t  _applyModelDeltas: function _applyModelDeltas(models, previousModels) {\n\t    var _this = this;\n\n\t    var currentIds = {};\n\t    _.each(models, function (model, index) {\n\t      var addedChildNotExists = !_this.children.findByModel(model);\n\t      if (addedChildNotExists) {\n\t        _this._onCollectionAdd(model, _this.collection, { at: index });\n\t      }\n\t      currentIds[model.cid] = true;\n\t    });\n\t    _.each(previousModels, function (prevModel) {\n\t      var removedChildExists = !currentIds[prevModel.cid] && _this.children.findByModel(prevModel);\n\t      if (removedChildExists) {\n\t        _this._onCollectionRemove(prevModel);\n\t      }\n\t    });\n\t  },\n\n\n\t  // Reorder DOM after sorting. When your element's rendering do not use their index,\n\t  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n\t  // rendering all the collectionView.\n\t  reorder: function reorder() {\n\t    var _this2 = this;\n\n\t    var children = this.children;\n\t    var models = this._filteredSortedModels();\n\t    var anyModelsAdded = _.some(models, function (model) {\n\t      return !children.findByModel(model);\n\t    });\n\n\t    // If there are any new models added due to filtering we need to add child views,\n\t    // so render as normal.\n\t    if (anyModelsAdded) {\n\t      this.render();\n\t    } else {\n\t      (function () {\n\t        // Get the DOM nodes in the same order as the models.\n\t        var elsToReorder = _.map(models, function (model, index) {\n\t          var view = children.findByModel(model);\n\t          view._index = index;\n\t          return view.el;\n\t        });\n\n\t        // Find the views that were children before but aren't in this new ordering.\n\t        var filteredOutViews = children.filter(function (view) {\n\t          return !_.contains(elsToReorder, view.el);\n\t        });\n\n\t        _this2.triggerMethod('before:reorder', _this2);\n\n\t        // Since append moves elements that are already in the DOM, appending the elements\n\t        // will effectively reorder them.\n\t        _this2._appendReorderedChildren(elsToReorder);\n\n\t        // remove any views that have been filtered out\n\t        _.each(filteredOutViews, _.bind(_this2.removeChildView, _this2));\n\t        _this2._checkEmpty();\n\n\t        _this2.triggerMethod('reorder', _this2);\n\t      })();\n\t    }\n\t  },\n\n\n\t  // Render view after sorting. Override this method to change how the view renders\n\t  // after a `sort` on the collection.\n\t  resortView: function resortView() {\n\t    if (this.getOption('reorderOnSort')) {\n\t      this.reorder();\n\t    } else {\n\t      this._renderChildren();\n\t    }\n\t  },\n\n\n\t  // Internal method. This checks for any changes in the order of the collection.\n\t  // If the index of any view doesn't match, it will render.\n\t  _sortViews: function _sortViews() {\n\t    var _this3 = this;\n\n\t    var models = this._filteredSortedModels();\n\n\t    // check for any changes in sort order of views\n\t    var orderChanged = _.find(models, function (item, index) {\n\t      var view = _this3.children.findByModel(item);\n\t      return !view || view._index !== index;\n\t    });\n\n\t    if (orderChanged) {\n\t      this.resortView();\n\t    }\n\t  },\n\n\n\t  // Internal reference to what index a `emptyView` is.\n\t  _emptyViewIndex: -1,\n\n\t  // Internal method. Separated so that CompositeView can append to the childViewContainer\n\t  // if necessary\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    this.$el.append(children);\n\t  },\n\n\n\t  // Internal method. Separated so that CompositeView can have more control over events\n\t  // being triggered, around the rendering process\n\t  _renderChildren: function _renderChildren() {\n\t    this._destroyEmptyView();\n\t    this._destroyChildren({ checkEmpty: false });\n\n\t    var models = this._filteredSortedModels();\n\t    if (this.isEmpty({ processedModels: models })) {\n\t      this._showEmptyView();\n\t    } else {\n\t      this.triggerMethod('before:render:children', this);\n\t      this._startBuffering();\n\t      this._showCollection(models);\n\t      this._endBuffering();\n\t      this.triggerMethod('render:children', this);\n\t    }\n\t  },\n\n\n\t  // Internal method to loop through collection and show each child view.\n\t  _showCollection: function _showCollection(models) {\n\t    var _this4 = this;\n\n\t    _.each(models, function (child, index) {\n\t      var ChildView = _this4._getChildView(child);\n\t      _this4._addChild(child, ChildView, index);\n\t    });\n\t  },\n\n\n\t  // Allow the collection to be sorted by a custom view comparator\n\t  _filteredSortedModels: function _filteredSortedModels(addedAt) {\n\t    if (!this.collection) {\n\t      return [];\n\t    }\n\n\t    var viewComparator = this.getViewComparator();\n\t    var models = this.collection.models;\n\t    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n\t    if (viewComparator) {\n\t      var addedModel = void 0;\n\t      // Preserve `at` location, even for a sorted view\n\t      if (addedAt) {\n\t        addedModel = models[addedAt];\n\t        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n\t      }\n\t      models = this._sortModelsBy(models, viewComparator);\n\t      if (addedModel) {\n\t        models.splice(addedAt, 0, addedModel);\n\t      }\n\t    }\n\n\t    // Filter after sorting in case the filter uses the index\n\t    models = this._filterModels(models);\n\n\t    return models;\n\t  },\n\n\n\t  // Filter an array of models, if a filter exists\n\t  _filterModels: function _filterModels(models) {\n\t    var _this5 = this;\n\n\t    if (this.getOption('filter')) {\n\t      models = _.filter(models, function (model, index) {\n\t        return _this5._shouldAddChild(model, index);\n\t      });\n\t    }\n\t    return models;\n\t  },\n\t  _sortModelsBy: function _sortModelsBy(models, comparator) {\n\t    if (typeof comparator === 'string') {\n\t      return _.sortBy(models, function (model) {\n\t        return model.get(comparator);\n\t      });\n\t    } else if (comparator.length === 1) {\n\t      return _.sortBy(models, _.bind(comparator, this));\n\t    } else {\n\t      return models.sort(_.bind(comparator, this));\n\t    }\n\t  },\n\n\n\t  // Internal method to show an empty view in place of a collection of child views,\n\t  // when the collection is empty\n\t  _showEmptyView: function _showEmptyView() {\n\t    var EmptyView = this.getEmptyView();\n\n\t    if (EmptyView && !this._showingEmptyView) {\n\t      this._showingEmptyView = true;\n\n\t      var model = new Backbone.Model();\n\t      var emptyViewOptions = this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n\t      if (_.isFunction(emptyViewOptions)) {\n\t        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n\t      }\n\n\t      var view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n\t      this.triggerMethod('before:render:empty', this, view);\n\t      this._addChildView(view, 0);\n\t      this.triggerMethod('render:empty', this, view);\n\n\t      view._parent = this;\n\t    }\n\t  },\n\n\n\t  // Internal method to destroy an existing emptyView instance if one exists. Called when\n\t  // a collection view has been rendered empty, and then a child is added to the collection.\n\t  _destroyEmptyView: function _destroyEmptyView() {\n\t    if (this._showingEmptyView) {\n\t      this.triggerMethod('before:remove:empty', this);\n\n\t      this._destroyChildren();\n\t      delete this._showingEmptyView;\n\n\t      this.triggerMethod('remove:empty', this);\n\t    }\n\t  },\n\n\n\t  // Retrieve the empty view class\n\t  getEmptyView: function getEmptyView() {\n\t    return this.getOption('emptyView');\n\t  },\n\n\n\t  // Retrieve the `childView` class, either from `this.options.childView` or from\n\t  // the `childView` in the object definition. The \"options\" takes precedence.\n\t  // The `childView` property can be either a view class or a function that\n\t  // returns a view class. If it is a function, it will receive the model that\n\t  // will be passed to the view instance (created from the returned view class)\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    if (!childView) {\n\t      throw new MarionetteError({\n\t        name: 'NoChildViewError',\n\t        message: 'A \"childView\" must be specified'\n\t      });\n\t    }\n\n\t    // first check if the `childView` is a view class (the common case)\n\t    // then check if it's a function (which we assume that returns a view class)\n\t    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Internal method for building and adding a child view\n\t  _addChild: function _addChild(child, ChildView, index) {\n\t    var childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n\t    var view = this.buildChildView(child, ChildView, childViewOptions);\n\n\t    this.addChildView(view, index);\n\n\t    return view;\n\t  },\n\n\n\t  // Render the child's view and add it to the HTML for the collection view at a given index.\n\t  // This will also update the indices of later views in the collection in order to keep the\n\t  // children in sync with the collection.\n\t  addChildView: function addChildView(view, index) {\n\t    this.triggerMethod('before:add:child', this, view);\n\n\t    // increment indices of views after this one\n\t    this._updateIndices(view, true, index);\n\n\t    view._parent = this;\n\n\t    this._addChildView(view, index);\n\n\t    this.triggerMethod('add:child', this, view);\n\n\t    return view;\n\t  },\n\n\n\t  // Internal method. This decrements or increments the indices of views after the added/removed\n\t  // view to keep in sync with the collection.\n\t  _updateIndices: function _updateIndices(view, increment, index) {\n\t    if (!this.getOption('sort')) {\n\t      return;\n\t    }\n\n\t    if (increment) {\n\t      // assign the index to the view\n\t      view._index = index;\n\t    }\n\n\t    // update the indexes of views after this one\n\t    this.children.each(function (laterView) {\n\t      if (laterView._index >= view._index) {\n\t        laterView._index += increment ? 1 : -1;\n\t      }\n\t    });\n\t  },\n\n\n\t  // Internal Method. Add the view to children and render it at the given index.\n\t  _addChildView: function _addChildView(view, index) {\n\t    // Only trigger attach if already attached and not buffering,\n\t    // otherwise _endBuffering() or Region#show() handles this.\n\t    var shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n\t    monitorViewEvents(view);\n\n\t    // set up the child view event forwarding\n\t    this._proxyChildEvents(view);\n\n\t    // Store the child view itself so we can properly remove and/or destroy it later\n\t    this.children.add(view);\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    // Render view\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    // Attach view\n\t    this.attachHtml(this, view, index);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\t  },\n\n\n\t  // Build a `childView` for a model in the collection.\n\t  buildChildView: function buildChildView(child, ChildViewClass, childViewOptions) {\n\t    var options = _.extend({ model: child }, childViewOptions);\n\t    return new ChildViewClass(options);\n\t  },\n\n\n\t  // Remove the child view and destroy it. This function also updates the indices of later views\n\t  // in the collection in order to keep the children in sync with the collection.\n\t  removeChildView: function removeChildView(view) {\n\t    if (!view || view._isDestroyed) {\n\t      return;\n\t    }\n\n\t    this.triggerMethod('before:remove:child', this, view);\n\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      destroyBackboneView(view);\n\t    }\n\n\t    delete view._parent;\n\t    this.stopListening(view);\n\t    this.children.remove(view);\n\t    this.triggerMethod('remove:child', this, view);\n\n\t    // decrement the index of views after this one\n\t    this._updateIndices(view, false);\n\t  },\n\n\n\t  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n\t  isEmpty: function isEmpty(options) {\n\t    var models = void 0;\n\t    if (_.result(options, 'processedModels')) {\n\t      models = options.processedModels;\n\t    } else {\n\t      models = this.collection ? this.collection.models : [];\n\t      models = this._filterModels(models);\n\t    }\n\t    return models.length === 0;\n\t  },\n\n\n\t  // If empty, show the empty view\n\t  _checkEmpty: function _checkEmpty() {\n\t    if (this.isEmpty()) {\n\t      this._showEmptyView();\n\t    }\n\t  },\n\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(collectionView, buffer) {\n\t    collectionView.$el.append(buffer);\n\t  },\n\n\n\t  // Create a fragment buffer from the currently buffered children\n\t  _createBuffer: function _createBuffer() {\n\t    var elBuffer = document.createDocumentFragment();\n\t    _.each(this._bufferedChildren, function (b) {\n\t      elBuffer.appendChild(b.el);\n\t    });\n\t    return elBuffer;\n\t  },\n\n\n\t  // Append the HTML to the collection's `el`. Override this method to do something other\n\t  // than `.append`.\n\t  attachHtml: function attachHtml(collectionView, childView, index) {\n\t    if (collectionView._isBuffering) {\n\t      // buffering happens on reset events and initial renders\n\t      // in order to reduce the number of inserts into the\n\t      // document, which are expensive.\n\t      collectionView._bufferedChildren.splice(index, 0, childView);\n\t    } else {\n\t      // If we've already rendered the main collection, append\n\t      // the new child into the correct order if we need to. Otherwise\n\t      // append to the end.\n\t      if (!collectionView._insertBefore(childView, index)) {\n\t        collectionView._insertAfter(childView);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Internal method. Check whether we need to insert the view into the correct position.\n\t  _insertBefore: function _insertBefore(childView, index) {\n\t    var currentView = void 0;\n\t    var findPosition = this.getOption('sort') && index < this.children.length - 1;\n\t    if (findPosition) {\n\t      // Find the view after this one\n\t      currentView = this.children.find(function (view) {\n\t        return view._index === index + 1;\n\t      });\n\t    }\n\n\t    if (currentView) {\n\t      currentView.$el.before(childView.el);\n\t      return true;\n\t    }\n\n\t    return false;\n\t  },\n\n\n\t  // Internal method. Append a view to the end of the $el\n\t  _insertAfter: function _insertAfter(childView) {\n\t    this.$el.append(childView.el);\n\t  },\n\n\n\t  // Internal method to set up the `children` object for storing all of the child views\n\t  _initChildViewStorage: function _initChildViewStorage() {\n\t    this.children = new ChildViewContainer();\n\t  },\n\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this._destroyChildren({ checkEmpty: false });\n\t  },\n\n\n\t  // Destroy the child views that this collection view is holding on to, if any\n\t  _destroyChildren: function _destroyChildren() {\n\t    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var checkEmpty = _ref2.checkEmpty;\n\n\t    this.triggerMethod('before:destroy:children', this);\n\t    var shouldCheckEmpty = checkEmpty !== false;\n\t    var childViews = this.children.map(_.identity);\n\n\t    this.children.each(_.bind(this.removeChildView, this));\n\n\t    if (shouldCheckEmpty) {\n\t      this._checkEmpty();\n\t    }\n\n\t    this.triggerMethod('destroy:children', this);\n\t    return childViews;\n\t  },\n\n\n\t  // Return true if the given child should be shown. Return false otherwise.\n\t  // The filter will be passed (child, index, collection), where\n\t  //  'child' is the given model\n\t  //  'index' is the index of that model in the collection\n\t  //  'collection' is the collection referenced by this CollectionView\n\t  _shouldAddChild: function _shouldAddChild(child, index) {\n\t    var filter = this.getOption('filter');\n\t    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n\t  },\n\n\n\t  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n\t  _proxyChildEvents: function _proxyChildEvents(view) {\n\t    var prefix = this.getOption('childViewEventPrefix');\n\n\t    // Forward all child view events through the parent,\n\t    // prepending \"childview:\" to the event name\n\t    this.listenTo(view, 'all', function (eventName) {\n\n\t      var childEventName = prefix + ':' + eventName;\n\n\t      var childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n\t      // call collectionView childViewEvent if defined\n\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n\t        childViewEvents[eventName].apply(this, args);\n\t      }\n\n\t      // use the parent view's proxyEvent handlers\n\t      var childViewTriggers = this._childViewTriggers;\n\n\t      // Call the event with the proxy name on the parent layout\n\t      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n\t        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n\t      }\n\n\t      this.triggerMethod.apply(this, [childEventName].concat(args));\n\t    });\n\t  },\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _.values(this.children._views);\n\t  },\n\t  getViewComparator: function getViewComparator() {\n\t    return this.getOption('viewComparator');\n\t  }\n\t});\n\n\t_.extend(CollectionView.prototype, ViewMixin);\n\n\t// Used for rendering a branch-leaf, hierarchical structure.\n\t// Extends directly from CollectionView and also renders an\n\t// a child view as `modelView`, for the top leaf\n\t// @deprecated\n\tvar CompositeView = CollectionView.extend({\n\n\t  // Setting up the inheritance chain which allows changes to\n\t  // Marionette.CollectionView.prototype.constructor which allows overriding\n\t  // option to pass '{sort: false}' to prevent the CompositeView from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\n\t  constructor: function constructor() {\n\t    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\t    CollectionView.prototype.constructor.apply(this, arguments);\n\t  },\n\n\n\t  // Configured the initial events that the composite view\n\t  // binds to. Override this method to prevent the initial\n\t  // events, or to add your own initial events.\n\t  _initialEvents: function _initialEvents() {\n\n\t    // Bind only after composite view is rendered to avoid adding child views\n\t    // to nonexistent childViewContainer\n\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Retrieve the `childView` to be used when rendering each of\n\t  // the items in the collection. The default is to return\n\t  // `this.childView` or Marionette.CompositeView if no `childView`\n\t  // has been defined. As happens in CollectionView, `childView` can\n\t  // be a function (which should return a view class).\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    // for CompositeView, if `childView` is not specified, we'll get the same\n\t    // composite view class rendered for each child in the collection\n\t    // then check if the `childView` is a view class (the common case)\n\t    // finally check if it's a function (which we assume that returns a view class)\n\t    if (!childView) {\n\t      return this.constructor;\n\t    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Return the serialized model\n\t  serializeData: function serializeData() {\n\t    return this.serializeModel();\n\t  },\n\n\n\t  // Renders the model and the collection.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this._isRendering = true;\n\t    this.resetChildViewContainer();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\t    this.renderChildren();\n\n\t    this._isRendering = false;\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\t  renderChildren: function renderChildren() {\n\t    if (this._isRendered || this._isRendering) {\n\t      CollectionView.prototype._renderChildren.call(this);\n\t    }\n\t  },\n\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(compositeView, buffer) {\n\t    var $container = this.getChildViewContainer(compositeView);\n\t    $container.append(buffer);\n\t  },\n\n\n\t  // Internal method. Append a view to the end of the $el.\n\t  // Overidden from CollectionView to ensure view is appended to\n\t  // childViewContainer\n\t  _insertAfter: function _insertAfter(childView) {\n\t    var $container = this.getChildViewContainer(this, childView);\n\t    $container.append(childView.el);\n\t  },\n\n\n\t  // Internal method. Append reordered childView'.\n\t  // Overidden from CollectionView to ensure reordered views\n\t  // are appended to childViewContainer\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    var $container = this.getChildViewContainer(this);\n\t    $container.append(children);\n\t  },\n\n\n\t  // Internal method to ensure an `$childViewContainer` exists, for the\n\t  // `attachHtml` method to use.\n\t  getChildViewContainer: function getChildViewContainer(containerView, childView) {\n\t    if (!!containerView.$childViewContainer) {\n\t      return containerView.$childViewContainer;\n\t    }\n\n\t    var container = void 0;\n\t    var childViewContainer = getOption.call(containerView, 'childViewContainer');\n\t    if (childViewContainer) {\n\n\t      var selector = getValue.call(containerView, childViewContainer);\n\n\t      if (selector.charAt(0) === '@' && containerView.ui) {\n\t        container = containerView.ui[selector.substr(4)];\n\t      } else {\n\t        container = containerView.$(selector);\n\t      }\n\n\t      if (container.length <= 0) {\n\t        throw new MarionetteError({\n\t          name: 'ChildViewContainerMissingError',\n\t          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n\t        });\n\t      }\n\t    } else {\n\t      container = containerView.$el;\n\t    }\n\n\t    containerView.$childViewContainer = container;\n\t    return container;\n\t  },\n\n\n\t  // Internal method to reset the `$childViewContainer` on render\n\t  resetChildViewContainer: function resetChildViewContainer() {\n\t    if (this.$childViewContainer) {\n\t      this.$childViewContainer = undefined;\n\t    }\n\t  }\n\t});\n\n\t// To prevent duplication but allow the best View organization\n\t// Certain View methods are mixed directly into the deprecated CompositeView\n\tvar MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n\t_.extend(CompositeView.prototype, MixinFromView);\n\n\tvar Behavior = MarionetteObject.extend({\n\t  cidPrefix: 'mnb',\n\n\t  constructor: function constructor(options, view) {\n\t    // Setup reference to the view.\n\t    // this comes in handle when a behavior\n\t    // wants to directly talk up the chain\n\t    // to the view.\n\t    this.view = view;\n\t    this.defaults = _.clone(_.result(this, 'defaults', {}));\n\t    this._setOptions(this.defaults, options);\n\t    // Construct an internal UI hash using\n\t    // the behaviors UI hash and then the view UI hash.\n\t    // This allows the user to use UI hash elements\n\t    // defined in the parent view as well as those\n\t    // defined in the given behavior.\n\t    // This order will help the reuse and share of a behavior\n\t    // between multiple views, while letting a view override a\n\t    // selector under an UI key.\n\t    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n\t    MarionetteObject.apply(this, arguments);\n\t  },\n\n\t  // proxy behavior $ method to the view\n\t  // this is useful for doing jquery DOM lookups\n\t  // scoped to behaviors view.\n\t  $: function $() {\n\t    return this.view.$.apply(this.view, arguments);\n\t  },\n\n\t  // Stops the behavior from listening to events.\n\t  // Overrides Object#destroy to prevent additional events from being triggered.\n\t  destroy: function destroy() {\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  proxyViewProperties: function proxyViewProperties() {\n\t    this.$el = this.view.$el;\n\t    this.el = this.view.el;\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\n\t    return this;\n\t  },\n\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this.view._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  getEvents: function getEvents() {\n\t    // Normalize behavior events hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n\t    // binds the handler to the behavior and builds a unique eventName\n\t    return _.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n\t      if (!_.isFunction(behaviorHandler)) {\n\t        behaviorHandler = this[behaviorHandler];\n\t      }\n\t      if (!behaviorHandler) {\n\t        return;\n\t      }\n\t      key = getUniqueEventName(key);\n\t      events[key] = _.bind(behaviorHandler, this);\n\t      return events;\n\t    }, {}, this);\n\t  },\n\n\t  // Internal method to build all trigger handlers for a given behavior\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Normalize behavior triggers hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n\t    return this._getViewTriggers(this.view, behaviorTriggers);\n\t  }\n\n\t});\n\n\t_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\t// A container for a Marionette application.\n\tvar Application = MarionetteObject.extend({\n\t  cidPrefix: 'mna',\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this._initRegion();\n\n\t    MarionetteObject.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  regionClass: Region,\n\n\t  _initRegion: function _initRegion(options) {\n\t    var region = this.getOption('region');\n\t    var RegionClass = this.getOption('regionClass');\n\n\t    // if the region is a string expect an el or selector\n\t    // and instantiate a region\n\t    if (_.isString(region)) {\n\t      this._region = new RegionClass({\n\t        el: region\n\t      });\n\t      return;\n\t    }\n\n\t    this._region = region;\n\t  },\n\n\t  getRegion: function getRegion() {\n\t    return this._region;\n\t  },\n\n\t  showView: function showView(view) {\n\t    var region = this.getRegion();\n\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getView: function getView() {\n\t    return this.getRegion().currentView;\n\t  },\n\n\t  // kick off all of the application's processes.\n\t  start: function start(options) {\n\t    this.triggerMethod('before:start', options);\n\t    this.triggerMethod('start', options);\n\t  }\n\n\t});\n\n\tvar AppRouter = Backbone.Router.extend({\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    Backbone.Router.apply(this, arguments);\n\n\t    var appRoutes = this.getOption('appRoutes');\n\t    var controller = this._getController();\n\t    this.processAppRoutes(controller, appRoutes);\n\t    this.on('route', this._processOnRoute, this);\n\t  },\n\n\t  // Similar to route method on a Backbone Router but\n\t  // method is called on the controller\n\t  appRoute: function appRoute(route, methodName) {\n\t    var controller = this._getController();\n\t    this._addAppRoute(controller, route, methodName);\n\t  },\n\n\t  // process the route event and trigger the onRoute\n\t  // method call, if it exists\n\t  _processOnRoute: function _processOnRoute(routeName, routeArgs) {\n\t    // make sure an onRoute before trying to call it\n\t    if (_.isFunction(this.onRoute)) {\n\t      // find the path that matches the current route\n\t      var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n\t      this.onRoute(routeName, routePath, routeArgs);\n\t    }\n\t  },\n\n\t  // Internal method to process the `appRoutes` for the\n\t  // router, and turn them in to routes that trigger the\n\t  // specified method on the specified `controller`.\n\t  processAppRoutes: function processAppRoutes(controller, appRoutes) {\n\t    var _this = this;\n\n\t    if (!appRoutes) {\n\t      return;\n\t    }\n\n\t    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n\t    _.each(routeNames, function (route) {\n\t      _this._addAppRoute(controller, route, appRoutes[route]);\n\t    });\n\t  },\n\n\t  _getController: function _getController() {\n\t    return this.getOption('controller');\n\t  },\n\n\t  _addAppRoute: function _addAppRoute(controller, route, methodName) {\n\t    var method = controller[methodName];\n\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n\t    }\n\n\t    this.route(route, methodName, _.bind(method, controller));\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t_.extend(AppRouter.prototype, CommonMixin);\n\n\t// Placeholder method to be extended by the user.\n\t// The method should define the object that stores the behaviors.\n\t// i.e.\n\t//\n\t// ```js\n\t// Marionette.Behaviors.behaviorsLookup: function() {\n\t//   return App.Behaviors\n\t// }\n\t// ```\n\tfunction behaviorsLookup() {\n\t  throw new MarionetteError({\n\t    message: 'You must define where your behaviors are stored.',\n\t    url: 'marionette.behaviors.md#behaviorslookup'\n\t  });\n\t}\n\n\t// Add Feature flags here\n\t// e.g. 'class' => false\n\tvar FEATURES = {};\n\n\tfunction isEnabled(name) {\n\t  return !!FEATURES[name];\n\t}\n\n\tfunction setEnabled(name, state) {\n\t  return FEATURES[name] = state;\n\t}\n\n\tvar previousMarionette = Backbone.Marionette;\n\tvar Marionette = Backbone.Marionette = {};\n\n\t// This allows you to run multiple instances of Marionette on the same\n\t// webapp. After loading the new version, call `noConflict()` to\n\t// get a reference to it. At the same time the old version will be\n\t// returned to Backbone.Marionette.\n\tMarionette.noConflict = function () {\n\t  Backbone.Marionette = previousMarionette;\n\t  return this;\n\t};\n\n\t// Utilities\n\tMarionette.bindEntityEvents = proxy(bindEntityEvents);\n\tMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioEvents = proxy(bindEntityEvents);\n\tMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioRequests = proxy(bindRadioRequests);\n\tMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\n\tMarionette.mergeOptions = proxy(mergeOptions);\n\tMarionette.getOption = proxy(getOption);\n\tMarionette.normalizeMethods = proxy(normalizeMethods);\n\tMarionette.extend = extend;\n\tMarionette.isNodeAttached = isNodeAttached;\n\tMarionette.deprecate = deprecate;\n\tMarionette.triggerMethod = proxy(triggerMethod);\n\tMarionette.triggerMethodOn = triggerMethodOn;\n\tMarionette.isEnabled = isEnabled;\n\tMarionette.setEnabled = setEnabled;\n\tMarionette.monitorViewEvents = monitorViewEvents;\n\n\tMarionette.Behaviors = {};\n\tMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n\t// Classes\n\tMarionette.Application = Application;\n\tMarionette.AppRouter = AppRouter;\n\tMarionette.Renderer = Renderer;\n\tMarionette.TemplateCache = TemplateCache;\n\tMarionette.View = View;\n\tMarionette.CollectionView = CollectionView;\n\tMarionette.CompositeView = CompositeView;\n\tMarionette.Behavior = Behavior;\n\tMarionette.Region = Region;\n\tMarionette.Error = MarionetteError;\n\tMarionette.Object = MarionetteObject;\n\n\t// Configuration\n\tMarionette.DEV_MODE = false;\n\tMarionette.FEATURES = FEATURES;\n\tMarionette.VERSION = version;\n\n\treturn Marionette;\n\n}));\n\n//# sourceMappingURL=backbone.marionette.js.map\n","/* jshint maxstatements: 14, maxcomplexity: 7 */\n\n// Trigger Method\n// --------------\n\nimport _         from 'underscore';\nimport getOption from './utils/getOption';\n\n// split the event name on the \":\"\nvar splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  var methodName = 'on' + event.replace(splitter, getEventName);\n  var method = getOption.call(this, methodName);\n  var result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger(event, ...args);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n  return fnc.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport { triggerMethodOn } from './trigger-method';\nimport _ from 'underscore';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(view, 'before:attach', shouldTriggerAttach);\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(view, 'attach', shouldAttach);\n    triggerDOMRefresh();\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(view, 'before:detach', shouldTriggerDetach);\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(view, 'detach', shouldDetach);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh();\n  }\n\n  function triggerDOMRefresh() {\n    if (view._isAttached && view._isRendered) {\n      triggerMethodOn(view, 'dom:refresh', view);\n    }\n  }\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  var methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    var method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindentityevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n}\n\nfunction unbindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n}\n\n// Export Public API\nexport {\n  bindEntityEvents,\n  unbindEntityEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './utils/normalizeMethods';\nimport MarionetteError from './error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindradiorequests'\n    });\n  }\n\n  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n}\n\nfunction unbindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n}\n\nexport {\n  bindRadioRequests,\n  unbindRadioRequests\n};\n","import _                        from 'underscore';\nimport getValue                 from '../utils/getValue';\nimport _invoke                  from '../utils/_invoke';\nimport { triggerMethod }        from '../trigger-method';\nimport Marionette               from '../backbone.marionette';\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    var BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    var _options = options === BehaviorClass ? {} : options;\n    var behavior = new BehaviorClass(_options, view);\n    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors: function() {\n    var behaviors = this.getValue(this.getOption('behaviors'));\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers: function() {\n    var triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents: function() {\n    var events = _invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties: function() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents: function() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents: function() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors: function(args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  _bindBehaviorUIElements: function() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements: function() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors: function(...args) {\n    var behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], args);\n    }\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nvar getUniqueEventName = function(eventName) {\n  var match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/getUniqueEventName';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n  const shouldPreventDefault = triggerDef.preventDefault !== false;\n  const shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n  return function(e) {\n    if (shouldPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers: function(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","import { triggerMethodOn } from '../trigger-method';\n\nexport default function destroyBackboneView(view) {\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = !!view._isAttached;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","import MarionetteError          from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","// Add Feature flags here\n// e.g. 'class' => false\nvar FEATURES = {\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","//Internal utility for creating context style global utils\nvar proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nvar extend = Backbone.Model.extend;\n\nexport default extend;\n","// Marionette.isNodeAttached\n// -------------------------\n\nimport Backbone from 'backbone';\n\n// Determine if `el` is a child of the document\nvar isNodeAttached = function(el) {\n  return Backbone.$.contains(document.documentElement, el);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nvar mergeOptions = function(options, keys) {\n  if (!options) { return; }\n  _.extend(this, _.pick(options, keys));\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nvar getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nvar normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nvar deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  var warn = deprecate._console.warn || deprecate._console.log || function() {};\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","import _ from 'underscore';\n\n// Similar to `_.result`, this is a simple helper\n// If a function is provided we call it with context\n// otherwise just return the value. If the value is\n// undefined return a default value\nvar getValue = function(value, ...args) {\n  if (_.isFunction(value)) {\n    return value.apply(this, args);\n  }\n  return value;\n};\n\nexport default getValue;\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nvar _setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default _setOptions;\n","// Error\n// -----\n\nimport _      from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nvar MarionetteError = extend.call(Error, {\n  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n  constructor: function MarionetteError(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    var error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace: function() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString: function() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","import getOption                from '../utils/getOption';\nimport getValue                 from '../utils/getValue';\nimport mergeOptions             from '../utils/mergeOptions';\nimport normalizeMethods         from '../utils/normalizeMethods';\nimport _setOptions              from '../utils/_setOptions';\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n}                               from '../bind-entity-events';\n\nexport default {\n  getValue: getValue,\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEntityEvents: bindEntityEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEntityEvents: unbindEntityEvents\n};\n","import Radio from 'backbone.radio';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from '../bind-radio-requests';\n\nimport {\n  bindEntityEvents as bindRadioEvents,\n  unbindEntityEvents as unbindRadioEvents\n} from '../bind-entity-events';\n\nexport default {\n\n  _initRadio: function() {\n    var channelName = this.getValue(this.getOption('channelName'));\n\n    if (!channelName) {\n      return;\n    }\n\n    var channel = this._channel = Radio.channel(channelName);\n\n    var radioEvents = this.getValue(this.getOption('radioEvents'));\n    this.bindRadioEvents(channel, radioEvents);\n\n    var radioRequests = this.getValue(this.getOption('radioRequests'));\n    this.bindRadioRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio: function() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel: function() {\n    return this._channel;\n  },\n\n  // Proxy `bindRadioEvents`\n  bindRadioEvents: bindRadioEvents,\n\n  // Proxy `unbindRadioEvents`\n  unbindRadioEvents: unbindRadioEvents,\n\n  // Proxy `bindRadioRequests`\n  bindRadioRequests: bindRadioRequests,\n\n  // Proxy `unbindRadioRequests`\n  unbindRadioRequests: unbindRadioRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\nimport { triggerMethod } from './trigger-method';\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nvar MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize: function() {},\n\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', ...args);\n\n    // mark as destroyed before doing the actual destroy, to\n    // prevent infinite loops within \"destroy\" event handlers\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// Template Cache\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nvar TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get: function(templateId, options) {\n    var cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear: function(...args) {\n    var i;\n    var length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load: function(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    var template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate: function(templateId, options) {\n    var $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: 'Could not find template: \"' + templateId + '\"'\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate: function(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Renderer\n// --------\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\nimport TemplateCache   from './template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nvar Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render: function(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import {\n  bindEntityEvents,\n  unbindEntityEvents\n} from '../bind-entity-events';\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents: function(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    bindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    bindEntityEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents: function(model, collection) {\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    unbindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    unbindEntityEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nvar normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, function(memo, val, key) {\n    var normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nvar normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function(r) {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nvar normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, function(val, key) {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, function(property) {\n        var propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys: function(hash) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues: function(hash, properties) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings: function() {\n    var uiBindings = _.result(this, '_uiBindings');\n    var ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements: function() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements: function() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI: function(name) {\n    return this._ui[name];\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport View from '../view';\nimport { triggerMethod } from '../trigger-method';\n\nvar ViewMixin = {\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered: function() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext: function(target = {}) {\n    const templateContext = this.getValue(this.getOption('templateContext'));\n    return _.extend(target, templateContext);\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents: function(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents: function(eventsArg) {\n    const events = this.getValue(eventsArg || this.events);\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Internal helper method to verify whether the view hasn't been destroyed\n  _ensureViewIsIntact: function() {\n    if (this._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Handle destroying the view and its children.\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements: function() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod: function(...args) {\n    const ret = triggerMethod.apply(this, args);\n\n    this._triggerEventOnBehaviors(...args);\n    this._triggerEventOnParentLayout(...args);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies: function() {\n    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n  },\n\n  _triggerEventOnParentLayout: function(eventName, ...args) {\n    const layoutView = this._parentView();\n    if (!layoutView) {\n      return;\n    }\n\n    // invoke triggerMethod on parent view\n    const eventPrefix = layoutView.getOption('childViewEventPrefix');\n    const prefixedEventName = eventPrefix + ':' + eventName;\n\n    layoutView.triggerMethod(prefixedEventName, ...args);\n\n    // use the parent view's childViewEvents handler\n    const childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(layoutView, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = layoutView._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      layoutView.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n  },\n\n  // Walk the _parent tree until we find a view (if one exists).\n  // Returns the parent view hierarchically closest to this view.\n  _parentView: function() {\n    let parent = this._parent;\n\n    while (parent) {\n      if (parent instanceof View) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin,  UIMixin);\n\nexport default ViewMixin;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport isNodeAttached from './utils/isNodeAttached';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport monitorViewEvents from './monitor-view-events';\nimport destroyBackboneView from './utils/destroyBackboneView';\nimport { triggerMethodOn } from './trigger-method';\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n\n  constructor(options) {\n    this._setOptions(options);\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n    this._ensureView(view);\n    if (view === this.currentView) { return this; }\n\n    this.triggerMethod('before:show', this, view, options);\n\n    monitorViewEvents(view);\n\n    this.empty(options);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this.empty, this);\n\n    // Make this region the view's parent.\n    // It's important that this parent binding happens before rendering so that any events\n    // the child may trigger during render can also be triggered on the child's ancestor views.\n    view._parent = this;\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n    return this;\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!this.getOption('replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(view, shouldReplaceEl);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n\n    this.currentView = view;\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!this.getOption('allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _ensureView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    const parent = this.el.parentNode;\n\n    parent.replaceChild(view.el, this.el);\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    if (!this.currentView) {\n      return;\n    }\n\n    const view = this.currentView;\n    const parent = view.el.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(this.el, view.el);\n    this._isReplaced = false;\n  },\n\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view, shouldReplace) {\n    if (shouldReplace) {\n      // replace the region's node with the view's node\n      this._replaceEl(view);\n    } else {\n      this.el.appendChild(view.el);\n    }\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should not remove anything\n    if (!view) { return this; }\n\n    view.off('destroy', this.empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    if (this._isReplaced) {\n      this._restoreEl();\n    }\n\n    if (!view._isDestroyed) {\n      this._removeView(view, options);\n    }\n\n    delete this.currentView._parent;\n    delete this.currentView;\n\n    this.triggerMethod('empty', this, view);\n    return this;\n  },\n\n  _removeView(view, {preventDestroy} = {}) {\n    const shouldPreventDestroy = !!preventDestroy;\n\n    if (shouldPreventDestroy) {\n      this._detachView(view);\n      return;\n    }\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.$el.contents().detach();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset() {\n    this.empty();\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy: function() {\n    this.reset();\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\nexport default Region;\n","import _                    from 'underscore';\nimport _invoke              from '../utils/_invoke';\nimport Region               from '../region';\nimport MarionetteError      from '../error';\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions: function() {\n\n    // init regions hash\n    this.regions =  this.regions || {};\n    this._regions = {};\n\n    this.addRegions(this.getValue(this.getOption('regions')));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions: function() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion: function(name, definition) {\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions: function(regionDefinitions) {\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = this._buildRegion(definition);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  // return the region instance from the definition\n  _buildRegion: function(definition) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    return this._buildRegionFromDefinition(definition);\n  },\n\n  _buildRegionFromDefinition: function(definition) {\n    if (_.isString(definition)) {\n      return this._buildRegionFromObject({el: definition});\n    }\n\n    if (_.isFunction(definition)) {\n      return this._buildRegionFromRegionClass(definition);\n    }\n\n    if (_.isObject(definition)) {\n      return this._buildRegionFromObject(definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#region-configuration-types'\n    });\n  },\n\n  _buildRegionFromObject: function(definition) {\n    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n    var options = _.omit(definition, 'regionClass');\n\n    _.defaults(options, {\n      el: definition.selector,\n      parentEl: _.partial(_.result, this, 'el')\n    });\n\n    return new RegionClass(options);\n  },\n\n  // Build the region directly from a given `RegionClass`\n  _buildRegionFromRegionClass: function(RegionClass) {\n    return new RegionClass({\n      parentEl: _.partial(_.result, this, 'el')\n    });\n  },\n\n  _addRegion: function(region, name) {\n    this.triggerMethod('before:add:region', name, region);\n\n    region._parent = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion: function(name) {\n    var region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions: function() {\n    var regions = this.getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion: function(region, name) {\n    this.triggerMethod('before:remove:region', name, region);\n\n    region.empty();\n    region.stopListening();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions: function() {\n    var regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion: function(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion: function(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions: function() {\n    return _.clone(this._regions);\n  },\n\n  showChildView: function(name, view, ...args) {\n    var region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  getChildView: function(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// View\n// ---------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ViewMixin          from './mixins/view';\nimport RegionsMixin       from './mixins/regions';\nimport monitorViewEvents  from './monitor-view-events';\nimport Renderer           from './renderer';\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    this._ensureViewIsIntact();\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.getOption('template');\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.$el.html(html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren: function() {\n    return _.chain(this.getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Collection View\n// ---------------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ChildViewContainer from 'backbone.babysitter';\nimport MarionetteError    from './error';\nimport ViewMixin          from './mixins/view';\nimport monitorViewEvents  from './monitor-view-events';\nimport destroyBackboneView from './utils/destroyBackboneView';\nimport { triggerMethodOn } from './trigger-method';\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.getOption('filter') || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }\n  },\n\n  // get the child view by model it holds, and remove it\n  _onCollectionRemove(model) {\n    const view = this.children.findByModel(model);\n    this.removeChildView(view);\n    this._checkEmpty();\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    this._ensureViewIsIntact();\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      this.triggerMethod('before:apply:filter', this);\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n      this.triggerMethod('apply:filter', this);\n    } else {\n      this.filter = filter;\n    }\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n    _.each(previousModels, (prevModel) => {\n      const removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n      if (removedChildExists) {\n        this._onCollectionRemove(prevModel);\n      }\n    });\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n      // Get the DOM nodes in the same order as the models.\n      const elsToReorder = _.map(models, function(model, index) {\n        const view = children.findByModel(model);\n        view._index = index;\n        return view.el;\n      });\n\n      // Find the views that were children before but aren't in this new ordering.\n      const filteredOutViews = children.filter(function(view) {\n        return !_.contains(elsToReorder, view.el);\n      });\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      _.each(filteredOutViews, _.bind(this.removeChildView, this));\n      this._checkEmpty();\n\n      this.triggerMethod('reorder', this);\n    }\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.getOption('reorderOnSort')) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.$el.append(children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    this._destroyEmptyView();\n    this._destroyChildren({checkEmpty: false});\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, (child, index) => {\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    });\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.getOption('filter')) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, function(model) {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return models.sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this.getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this._addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n\n      view._parent = this;\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  getEmptyView() {\n    return this.getOption('emptyView');\n  },\n\n  // Retrieve the `childView` class, either from `this.options.childView` or from\n  // the `childView` in the object definition. The \"options\" takes precedence.\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    const childView = this.getOption('childView');\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    // first check if the `childView` is a view class (the common case)\n    // then check if it's a function (which we assume that returns a view class)\n    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, ChildView, index) {\n    const childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n    const view = this.buildChildView(child, ChildView, childViewOptions);\n\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n\n    // increment indices of views after this one\n    this._updateIndices(view, true, index);\n\n    view._parent = this;\n\n    this._addChildView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(view, increment, index) {\n    if (!this.getOption('sort')) {\n      return;\n    }\n\n    if (increment) {\n      // assign the index to the view\n      view._index = index;\n    }\n\n    // update the indexes of views after this one\n    this.children.each(function(laterView) {\n      if (laterView._index >= view._index) {\n        laterView._index += increment ? 1 : -1;\n      }\n    });\n  },\n\n  // Internal Method. Add the view to children and render it at the given index.\n  _addChildView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildEvents(view);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    this.children.add(view);\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    // Render view\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    // Attach view\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return;\n    }\n\n    this.triggerMethod('before:remove:child', this, view);\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n\n    delete view._parent;\n    this.stopListening(view);\n    this.children.remove(view);\n    this.triggerMethod('remove:child', this, view);\n\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // If empty, show the empty view\n  _checkEmpty() {\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    collectionView.$el.append(buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = document.createDocumentFragment();\n    _.each(this._bufferedChildren, function(b) {\n      elBuffer.appendChild(b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.getOption('sort') && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find(function(view) {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      currentView.$el.before(childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.$el.append(childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren({checkEmpty: false});\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren({checkEmpty} = {}) {\n    this.triggerMethod('before:destroy:children', this);\n    const shouldCheckEmpty = checkEmpty !== false;\n    const childViews = this.children.map(_.identity);\n\n    this.children.each(_.bind(this.removeChildView, this));\n\n    if (shouldCheckEmpty) {\n      this._checkEmpty();\n    }\n\n    this.triggerMethod('destroy:children', this);\n    return childViews;\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.getOption('filter');\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  },\n\n  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n  _proxyChildEvents(view) {\n    const prefix = this.getOption('childViewEventPrefix');\n\n    // Forward all child view events through the parent,\n    // prepending \"childview:\" to the event name\n    this.listenTo(view, 'all', function(eventName, ...args) {\n\n      const childEventName = prefix + ':' + eventName;\n\n      const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n      // call collectionView childViewEvent if defined\n      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n        childViewEvents[eventName].apply(this, args);\n      }\n\n      // use the parent view's proxyEvent handlers\n      const childViewTriggers = this._childViewTriggers;\n\n      // Call the event with the proxy name on the parent layout\n      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n        this.triggerMethod(childViewTriggers[eventName], ...args);\n      }\n\n      this.triggerMethod(childEventName, ...args);\n    });\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  getViewComparator() {\n    return this.getOption('viewComparator');\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport deprecate       from './utils/deprecate';\nimport getValue        from './utils/getValue';\nimport getOption       from './utils/getOption';\nimport MarionetteError from './error';\nimport CollectionView  from './collection-view';\nimport View            from './view';\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView and also renders an\n// a child view as `modelView`, for the top leaf\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor() {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    var childView = this.getOption('childView');\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    this._ensureViewIsIntact();\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    $container.append(buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    $container.append(childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    $container.append(children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = getOption.call(containerView, 'childViewContainer');\n    if (childViewContainer) {\n\n      const selector = getValue.call(containerView, childViewContainer);\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = containerView.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _                  from 'underscore';\nimport MarionetteObject   from './object';\nimport DelegateEntityEventsMixin      from './mixins/delegate-entity-events';\nimport TriggersMixin      from './mixins/triggers';\nimport UIMixin            from './mixins/ui';\nimport getUniqueEventName from './utils/getUniqueEventName';\n\nvar Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor: function(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $: function() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy: function() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties: function() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements: function() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this.view._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents: function() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, function(events, behaviorHandler, key) {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    } , {}, this);\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// Application\n// -----------\nimport _                from 'underscore';\nimport MarionetteObject from './object';\nimport Region           from './region';\n\n// A container for a Marionette application.\nvar Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion: function(options) {\n    var region = this.getOption('region');\n    var RegionClass = this.getOption('regionClass');\n\n    // if the region is a string expect an el or selector\n    // and instantiate a region\n    if (_.isString(region)) {\n      this._region = new RegionClass({\n        el: region\n      });\n      return;\n    }\n\n    this._region = region;\n  },\n\n  getRegion: function() {\n    return this._region;\n  },\n\n  showView: function(view, ...args) {\n    var region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView: function() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start: function(options) {\n    this.triggerMethod('before:start', options);\n    this.triggerMethod('start', options);\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone                from 'backbone';\nimport _                       from 'underscore';\nimport MarionetteError         from './error';\nimport CommonMixin             from './mixins/common';\nimport { triggerMethod }       from './trigger-method';\n\nvar AppRouter = Backbone.Router.extend({\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    Backbone.Router.apply(this, arguments);\n\n    var appRoutes = this.getOption('appRoutes');\n    var controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute: function(route, methodName) {\n    var controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute: function(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes: function(controller, appRoutes) {\n    if (!appRoutes) { return; }\n\n    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, route => {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    });\n  },\n\n  _getController: function() {\n    return this.getOption('controller');\n  },\n\n  _addAppRoute: function(controller, route, methodName) {\n    var method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","import Backbone           from 'backbone';\nimport {version}          from '../package.json';\n\nimport proxy              from './utils/_proxy';\nimport extend             from './utils/extend';\nimport isNodeAttached     from './utils/isNodeAttached';\nimport mergeOptions       from './utils/mergeOptions';\nimport getOption          from './utils/getOption';\nimport normalizeMethods   from './utils/normalizeMethods';\nimport deprecate          from './utils/deprecate';\n\nimport monitorViewEvents  from './monitor-view-events';\nimport MarionetteObject   from './object';\nimport Renderer           from './renderer';\nimport TemplateCache      from './template-cache';\nimport View               from './view';\nimport CollectionView     from './collection-view';\nimport CompositeView      from './composite-view';\nimport Behavior           from './behavior';\nimport Region             from './region';\nimport Application        from './application';\nimport AppRouter          from './app-router';\nimport MarionetteError    from './error';\n\nimport behaviorsLookup    from './config/behaviors-lookup';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n} from './bind-entity-events';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from './bind-radio-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './trigger-method';\n\nvar previousMarionette = Backbone.Marionette;\nvar Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEntityEvents = proxy(bindEntityEvents);\nMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioEvents = proxy(bindEntityEvents);\nMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioRequests = proxy(bindRadioRequests);\nMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"],"sourceRoot":"/source/"}